* 概要
** タイムテーブルに載った内容
制約と誓約、ある能力を高めるためには、この二つの制限が必要だといわれます。自分の人生をオブジェクト指向に捧げると誓約したエンジニアのために、オブジェクト指向の能力を高めるための制約「オブジェクト指向エクササイズ*」を紹介します。 
* 「オブジェクト指向エクササイズ」は先日出版された「ThoughtWorksアンソロジー」中の一編です。ThoughtWorksアンソロジーは、マーチン・ファウラー率いるThoughtWorks社の技術者によるアジャイルとオブジェクト指向に関する珠玉のエッセイ集です。 

** テーマ
- オブジェクト指向設計の復権/再発見
- エクササイズによってコーディングと設計の面白さをつたえる

テーマについての解説はまとめ参照

** 効果
- ThoughtWorksアンソロジーの宣伝
- オージス総研の宣伝

* 前半(大村)
10分程度で9つのオブジェクト指向エクササイズを紹介します
http://mail.google.com/mail/?ui=2&ik=c891bdc733&view=att&th=11f0ad6e35381b9e&attid=0.1&disp=vgp&zw

* 後半(yojik)

** 基本的な方針
自分に割り当てられた時間を25分程度と考え、5つのChapterで以下のエクササイズの説明をします。

6.すべてのエンティティを小さくすること
3.すべてのプリミティブ型と文字列型をラップすること
7.一つのクラスにつきインスタンスは二つまでにすること
9.getter/setterを利用しないこと:

一つ一つ説明するのでは大村くんパートと一緒になってしまうので、大きく二つのパートに分ける
- オブジェクトの分解 
- オブジェクトのカプセル化

そして、これらのエクササイズをすると、どんな知見が得られるかについて説明できればよい。

** Chapter01:例題説明
Amazonの最低価格取得ツールの説明。クラス図などを用いて、実習前のツールの構造が似非オブジェクト指向になっていることを簡単に説明する。

** Chapter02: 分解されていくオブジェクト
6.すべてのエンティティを小さくすること
3.すべてのプリミティブ型と文字列型をラップすること
7.一つのクラスにつきインスタンスは二つまでにすること
上記の原則にしたがってオブジェクトが分解していく様子をパラパラ漫画で

オブジェクトが分解されて役割が移動していくことを
パラパラ漫画形式で実例を紹介していく

** Chapter03: カプセル化していくオブジェクト
- getter/setterを利用しないこと:
一番つらかったのが、Viewがモデルの内容を表示する際にgetterを使わないこと。
実際はBookからの価格情報の取得をどうおこなうか?

皆で検討しているときに出てきた設計案を整理して伝える
1.DTO的発想/プラガブルMVC的発想
ある種の値オブジェクト(MapやDTO)を返却させる。
Viewが要求するようなインタフェースをModelに実装させるという意味ではプラガブルViewに近い
一般的な解法だと思われる。どこまでModelに担当させるかで設計のバリエーションが出ると思われる。

2.Visitor的発想
表示用のVisitorオブジェクトをModelオブジェクトにアクセプトさせて画面表示。
ModelがViewの知識をある程度持っているためGUIには向かないかもしれないが、
オブジェクトの内容をダンプするといった状況では、こちらが使われることが多いだろう。

どんなフォースを優先させると、どういう設計に行き着くかを軽く説明する。
設計作業でもっとも重要なのがフォース(制約)をバランスさせること。
クササイズに効能として、これらの議論が引き出されますよ、
といったことを説明したい。

** Chapter04:予想される反論
エクササイズはとにかく極端なので、
予想される反論について補足する。

** Chapter05:まとめ
*** オブジェクト指向設計の衰退
 オブジェクト指向分析設計という言葉が注目されたのは1990年代後半
 その後も、様々なオブジェクト指向言語や
 フレームワーク、開発プロセスが登場したが、 
 逆に「オブジェクト指向設計」そのものに対する注目は薄れた。
 # 属人性が嫌われたのでは

*** ソフトウェアは人が作る
 しかし結局ソフトウェアは人が作る。
 エンジニアリングを考慮していない開発は失敗する
 http://www.infoq.com/jp/news/2008/11/decline-of-agile
 上記文章ではエンジニアリングを考慮しない
 アジャイル開発の失敗について述べている

*** 設計スキルとしてのオブジェクト指向設計は必須である
 オブジェクト指向技術に どんなメリットがあるかを
 明確に述べることは難しい。
 (トートロジーになってしまうが)現代のソフトウェアは
 殆どがオブジェクト指向言語で作られている。
 したがってオブジェクト指向設計は、かつての構造化と
 同様に選択科目では無く必須科目になっている。

*** 実際の開発でオブジェクト指向設計を貫くのは難しい 
 経験の少ないプログラマがオブジェクト指向設計をすると
 無意味な過剰設計になってしまったり、
 逆に妥協しすぎてオブジェクト指向から離れてしまったりする。

*** そもそも実践が足りていないためである
 オブジェクト指向を実践する演習が必要である。
 しかし殆どの教材は、わざとオブジェクト指向を
 適用しやすくしたものばかりで実践的な知識が身に付かない。

*** そこでオブジェクト指向エキササイズ(少し論理の飛躍があるかな。。)
 エクササイズの特徴は現実にあるプログラムを対象にすること。
 現実のプログラムを記述する上で、(結構厳しい)制約を課すことにより、
 強制的にオブジェクト指向のやり方を叩き込む点である。
 # ただし実際のプロジェクトに全部適用しろとは言っていない。
