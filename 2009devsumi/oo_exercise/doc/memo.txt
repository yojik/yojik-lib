この文章について
以下の内容で構成されてます
- プレゼンテーション用メモ
  自分の頭の整理です。 なぜ「デブサミ」の「開発トラック」で
  OOエクササイズをやらなければならないか? 根拠を示すものです。
  この内容をしゃべるのではなくて、
  ここら辺を前提としてスライドを作ります。(少なくとも自分パートは)
  とりあえずカオスな状態の頭の中をダンプしていますが、
  ミーティングで議論雑談した内容も含まれていると思います。
  エクササイズと関係無いことも一杯書いてあります。。。

- Chapter案
  自分がしゃべるところを5つぐらいのブロックにわけて、
  どういうことをしゃべりたいかメモったものです。


* プレゼンテーション作成メモ
** エンジニアリング重要!
最近のソフトウェア開発プロセスの議論では、
設計のようなエンジニアリングそのものについて突っ込むものが少なかった。
一見正しいことだが、エンジニアリングを軽視すれば
品質や機能的に劣る製品をリリースすることになってしまう。
http://blogs.itmedia.co.jp/hiranabe/2009/01/12-ff54.html

** ソフトウェアは人が作る
ソフトウェアは人が作る。エンジニアリングの質を高めるには人の質を高める必要がある。
アルゴリズム、設計コーディング、テスト、ネットワーク、
パフォーマンスチューニング、構成管理、ユーザビリティ、
様々なスキルが必要になってくる。

** 「ソフトウェア設計」のスキルとしてオブジェクト指向設計は必須である。
様々なスキルの中で設計(およびコーディング)に関しては、
オブジェクト指向の知識が必須である。
いまさら、オブジェクト指向技術に関して
どんなメリットがあるかを明確に述べることは難しい。
しかし、(トートロジーになってしまうが)現代のソフトウェアは
殆どがオブジェクト指向設計で作られている。
したがってオブジェクト指向設計は、かつての構造化と
同様に選択科目では無く必須科目になっている。
(将来は関数型言語の知識もそうなるのだろう)

** オブジェクト指向設計(実装)を実際の開発で行う
実際の開発でオブジェクト指向設計を貫くのは難しい。
経験の少ないプログラマがオブジェクト指向設計をすると
無意味な過剰設計になってしまったり、
逆に妥協しすぎてオブジェクト指向から離れてしまったりする。

** そもそも実践が足りていないためである
技術の習得には実践が必要である。
教科書どおりの知識を現場に投入してもすぐに上手くいくことは無い。
オブジェクト指向を実践するため、よいトレーニングが必要である。
しかし殆どの場合、トレーニング教材は
わざとオブジェクト指向を適用しやすくしたものばかりである、
これでは実践的な知識が身に付かない。

** そこでオブジェクト指向エキササイズ(少し論理の飛躍があるかな。。)
エクササイズの特徴は現実にあるプログラムを対象にすること。
現実のプログラムを記述する上で、(結構厳しい)制約を課すことにより、
強制的にオブジェクト指向のやり方を叩き込む点である。
# ただし実際のプロジェクトに全部適用しろとは言っていない。

* 各Chapterの内容案
** 基本的な方針
自分に割り当てられた時間を25分程度と考え、5つのChapterで以下のエクササイズの説明をします。

6.すべてのエンティティを小さくすること
3.すべてのプリミティブ型と文字列型をラップすること
7.一つのクラスにつきインスタンスは二つまでにすること
9.getter/setterを利用しないこと:

一つ一つ説明するのでは大村くんパートと一緒になってしまうので、大きく二つのパートに分ける
- オブジェクトの分解 
- オブジェクトのカプセル化

そして、これらのエクササイズをすると、どんな知見が得られるかについて説明できればよい。


** Chapter01:例題説明
Amazonの最低価格取得ツールの説明。クラス図などを用いて、実習前のツールの構造が似非オブジェクト指向になっていることを簡単に説明する。


** Chapter02: 分解されていくオブジェクト
6.すべてのエンティティを小さくすること
3.すべてのプリミティブ型と文字列型をラップすること
7.一つのクラスにつきインスタンスは二つまでにすること
上記の原則にしたがってオブジェクトが分解していく様子をパラパラ漫画で

オブジェクトが分解されて役割が移動していくことを
パラパラ漫画形式で実例を紹介していく

それで何が得られるか。考え中。。。


** Chapter03: カプセル化していくオブジェクト
- getter/setterを利用しないこと:
オブジェクトのカプセル化のキモであるところのGetter、Setterの排除を説明



** Chapter04: 設計におけるフォースについて
getter/setterの排除について、一番つらかったのが、Viewがモデルの内容を表示する際にgetterを使わないこと。
皆で検討しているときに様々な設計案が出た。

1.DTO的発想/プラガブルMVC的発想
ある種の値オブジェクト(MapやDTO)を返却させる。
Viewが要求するようなインタフェースをModelに実装させるという意味ではプラガブルViewに近い
一般的な解法だと思われる。どこまでModelに担当させるかで設計のバリエーションが出ると思われる。

2.Visitor的発想
表示用のVisitorオブジェクトをModelオブジェクトにアクセプトさせて画面表示。
ModelがViewの知識をある程度持っているということでGUIには向かないかもしれないが、
オブジェクトの内容をダンプするといった状況では、こちらが使われることが多いだろう。

それらの検討がどんなプロセスで行われたか、
どんなフォースを優先させると、どういう設計に行き着くかを軽く説明する。

設計作業でもっとも重要なのがフォース(制約)をバランスさせることであり、
エクササイズによって、これらの議論が引き出されますよ、といったことを説明したい。

** Chapter05:まとめ
考え中。。。
各種反論への回答とか。。


* 各種データ:  
http://d.hatena.ne.jp/katzchang/20080731/p1
-------------------------------------------




