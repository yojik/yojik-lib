<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"  xml:lang="ja" lang="ja">
  <head>
    <!--
      テストああああいいいうううえええおおお
      #xyzzyが一発で日本語判定するように日本語を最初に書いてます。。-->
    <title>OO厨厨トレイン</title>
    <!-- metadata -->
    <meta name="generator" content="S5" />
    <meta name="version" content="S5 1.3" />
    <meta name="author" content="Eric A. Meyer" />
    <meta name="company" content="Complex Spiral Consulting" />
    <!-- meta extensions -->
    <meta name="subject" content="S5 1.3beta7" />
    <meta name="creator" content="Christian Effenberger" />
    <meta name="contributor" content="youcan[64]netzgesta[46]de" /><meta name="publisher" content="s5.netzgesta.de" /><meta name="description" content="S5 1.3 is a very flexible and lightweight slide show system available for anyone to use (including transitions and scalable fonts and images)" /><meta name="keywords" content="S5, slide show, projection-mode, powerpoint-like, scala-like, keynote-like, incremental display, scalable fonts, scalable images, transitions, notes, osf, xoxo, css, javascript, xhtml, public domain" /><meta name="robots" content="index, follow" />
    <meta name="revisit-after" content="7 days" />
    <!-- meta temporary -->
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Script-Type" content="text/javascript" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <!-- configuration parameters -->
    <meta name="defaultView" content="slideshow" />
    <meta name="controlVis" content="hidden" />
    <!-- configuration extensions -->
    <meta name="tranSitions" content="true" />
    <meta name="fadeDuration" content="150" />
    <meta name="incrDuration" content="150" />
    <!-- style sheet links -->
    <link rel="stylesheet" href="ui/advanced_gfx/slides.css" type="text/css" media="projection" id="slideProj" />
    <link rel="stylesheet" href="ui/advanced_gfx/outline.css" type="text/css" media="screen" id="outlineStyle" />
    <link rel="stylesheet" href="ui/advanced_gfx/print.css" type="text/css" media="print" id="slidePrint" />
    <link rel="stylesheet" href="ui/advanced_gfx/opera.css" type="text/css" media="projection" id="operaFix" />
    <!-- embedded styles -->
    <style type="text/css" media="all">
      .imgcon {width: 100%; margin: 0 auto; padding: 0; text-align: center;}
      #anim {width: 33%; height: 320px; position: relative;}
      #anim img {position: absolute; top: 0px; left: 0px;}
      .logo {margin: 0.2em 0 0 0.15em; padding: 0;}
      .clock {margin: 0.1em 0.2em; padding: 0; position: absolute; top: 0em; right: 0em;}
      .red   {color: #C02;}
      .green {color: green;}

      img.timeline {position:absolute; right:10px; }
      
    </style>
    <!-- S5 JS -->
    <script src="ui/advanced_gfx/slides.js" type="text/javascript"></script>
  </head>
  <body>
    <div class="layout">
      <div id="controls"><!-- DO NOT EDIT --></div>
      <div id="currentSlide"><!-- DO NOT EDIT --></div>
      <div id="header">
	<img class="scale logo" width="96" height="75" src="pix/logo.png" alt="S5" title="S5" />
	<object type="application/x-shockwave-flash" data="obj/flash/relog.swf" width="80" height="80" class="scale clock" classid="CLSID:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://active.macromedia.com/flash2/cabs/swflash.cab#version=6,0,0,0">
	  <param name="movie" value="obj/flash/relog.swf" />
	  <param name="wmode" value="transparent" />
	  <param name="quality" value="high" />
	  <param name="menu" value="true" />
	  <param name="bgcolor" value="#6B6B6F" />
	</object>
      </div>

      <div id="footer">
	<h1><span class="red">OO</span>トレイン</h1>
	<p>オブジェクト指向の現在過去未来</p>
      </div>
    </div>

    <div class="presentation">
      <div class="slide">
	<h1><span class="red">OO</span><span class="green">厨</span>トレイン(仮題)</h1>
	<h2>～オブジェクト指向の現在過去未来～</h2>
	<h3>Yoji.Kanno</h3>
	<h4><a href="http://www.ogis-ri.co.jp" rel="external">株式会社 オージス総研</a></h4>
	<h4><a href="http://d.hatena.ne.jp/yojik/" rel="external">http://d.hatena.ne.jp/yojik/</a></h4>
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>Caution!!</h1>
  	<p>
	  オブジェクト指向の歴史という大それたテーマを扱っています。いろいろ間違えや大言壮語等あると思いますが、、、スルーせずにガンガン突っ込みください。ね。
	</p>
	<p>
	  OOかつエンタープライズ中心史観という立場を取っているため、IT業界における重要な出来事をすっ飛ばしている可能性があります。おそらくこれらの出来事もすべて確実にリンクしているのでしょう。
	
	<p>
	  いろいろご容赦ください
	</p>
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>このスライドの企画書..</h1>
	<p>
	  「過去が希望をくれる」 
	</p>
	<p>
	  最新の技術を追うことも大事ですが、過去を振り返り
	  自分達の立ち位置を確かめることも重要ではないでしょうか。
	  オブジェクトの広場のナビケートで、日本におけるOOの過去、
	  現在の世界の潮流、OOの未来へ辿る旅にでましょう。
	</p>
	<p>
	  時の列車デンライナー 次の駅は過去か？未来か？（OPナレーション） 
	</p>
	</p>
      </div>
      
      
      <div class="slide">
	<h1>自己紹介</h1>
	<p>オブジェクトの広場</p>
	<p>株式会社オージス総研「オブジェクトの広場」の活動開始は前世紀末(1998年)にまで遡ります。当時は、日本のオブジェクト指向コミュニティを立ち上げてやろうという志で設立されました。
	</p>
	<p>
	  現在は、月に一度、オブジェクト指向関連の話題を取り扱うWebマガジンを発行しています。ネタはいつでも募集中!</p>
	<div class="notes"></div>
      </div>
      
      <div class="slide">
	<h1>自己紹介</h1>
	<p>佐藤 匡剛</p>
	<p>菅野 洋史</p>
	<p>大村 伸吾</p>
	<p></p>
      </div>
      
      <div class="slide">
	<h1>旅の準備</h1>
	<h2>オブジェクト指向って何</h2>
	<ul>
	  <li>言語パラダイム?</li>
	  <li>分析設計技法?</li>
	  <li>開発プロセス?</li>
	  <li>考え方?</li>
	</ul>
	<p>
	  言語パラダイムからスタートして用法が拡大してきている。
	  ここでは敢えて区別しない!!
	</p>
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>もくじ</h1>
	<ul>
	  <li>現代編
	    <ul>
	      <li>Part1(現代)</li>
	    </ul>
	  </li>
	  <li>過去編
	    <ul>
	      <li>Part2(90年代末期-00年代前半)～近代:J2EEとアジャイル時代～ </li>
	      <li>Part3(90年代後半)～近世:コンポーネントと開発方法論時代～ </li>
	      <li>Part4(90年代前半)～中世:統合開発環境の時代～ </li>
	      <li>Part5(80年代後半)～古代:AI研究時代～</li>
	      <li>Part6(70年代-90年代)～先史時代:オブジェクト指向誕生の次代～</li>
	    </ul>
	  </li>
	  <li>未来編(Part7)</li>
	  <li>まとめ(Part8)</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline0.png"/> -->
	<div  class="notes"></div>
      </div>

      <div class="slide">
	<h1>OO厨々トレイン</h1>
	<h2>現代編</h2>
	<h3>佐藤 匡剛</h3>
	<h4>株式会社オージス総研</h4>
	<h4><a href="http://ameblo.jp/ouobpo" target="_blank">http://ameblo.jp/ouobpo</a></h4>
      </div>

      <div class="slide">
	<h1>Part1（現代）</h1>
	<h2>オブジェクト指向を取り巻く現在の状況</h2>
	<ul>
	  <li>DI　+　AOP</li>
	  <li>サービス指向アーキテクチャ（SOA）</li>
	  <li>ドメイン駆動設計（DDD）</li>
	</ul>
	<!-- <img src="img/timeline1.png"/> -->
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>DI + AOP</h1>
	<h2>DI（依存性の注入）</h2>
	<ul>
	  <li>EJBのような超重量級コンテナに対する批判から生まれた</li>
	  <ul>
	    <li>Rod Johnsonによる痛烈なEJB批判（『実践J2EEシステムデザイン』）</li>
	    <li>POJO（ピュアオブジェクト）への回帰</li>
	    <li>PicoContainer、HiveMind、Spring・・・</li>
	    <li>日本では2004年5月に Seasar2 がリリース</li>
	  </ul>
	  <li>コンポーネント同士を疎結合に組み合わせる技術</li>
	</ul>
      </div>
      <div class="slide">
	<h1>DI + AOP</h1>
	<h2>AOP（アスペクト指向プログラミング）</h2>
	<ul>
	  <li>元々は、オブジェクト指向批判から生まれたパラダイム</li>
	  <ul>
	    <li>横断的関心事の分離／モジュール化</li>
	  </ul>
	  <li>DIコンテナとの親和性の良さから、爆発的に普及</li>
	  <ul>
	    <li>宣言的トランザクション、ロギング、プロキシ・・・</li>
	  </ul>
	</ul>
	<p>⇒ Java EE 5（EJB 3）も批判を受け入れて軌道修正した</p>
	<!-- <img src="img/timeline1.png"/> -->
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>サービス指向アーキテクチャ</h1>
	<h2>オブジェクトからサービスへ</h2>
	<ul>
	  <li>システム開発が1アプリケーションを超えた視点へと広がっていく</li>
	  <ul>
	    <li>EA（企業全体の最適化）の視点</li>
	    <li>SaaS（Software as a Service）</li>
	    <li>より大きな粒度の再利用への挑戦</li>
	  </ul>
	  <li>SOAを支える新たな技術要素</li>
	  <ul>
	    <li>Webサービス meets オールドスクールEAI</li>
	    <li>メッセージング（非同期通信）の再発見（MQ、MOM）</li>
	    <li>新たなミドルウェアの登場（ESB、BPM）</li>
	    <li>Java EE 5で数多く盛り込まれたWS-*仕様</li>
	  </ul>
	  <li>SOA時代のGoFパターン？</li>
	  <ul>
	    <li>『Enterprise Integration Patterns』（Hohpe&Woolf, 2003）</li>
	  </ul>
	</ul>
	<!-- <img src="img/timeline1.png"/> -->
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>ドメイン駆動設計</h1>
	<h2>オブジェクト指向の大本命</h2>
	<p></p>
	<ul>
	  <li>長年培われてきたOOベストプラクティスの集大成</li>
	  <li>責務駆動設計（RDD）の正統な継承者</li>
	  <li>ドメイン（＝ソフトウェア開発の真の課題）にタックル
	    <ul>
	      <li>反復的にドメインモデルを深化させていく</li>
	      <li>ドメインモデルを開発者ユーザ間の共通言語に</li>
	      <li>ドメインモデルと実装コードとの対応付け（＝MDD）</li>
	    </ul>
	  </li>
	  <li>40（＋1）のDDDパターン
	    <ul>
	      <li>DDDの三原則（3パターン）</li>
	      <li>ドメインモデルの構成要素（8＋1パターン）</li>
	      <li>ドメインリファクタリング（7パターン）</li>
	      <li>戦略的DDD（22パターン）</li>
	    </ul>
	  </li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>DDDパターン</h1>
	<img src="img/DDDPatterns.png"/>
	<!-- <img src="img/timeline1.png"/> -->
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>OO厨々トレイン</h1>
	<h2>過去編</h2>
	<h3>菅野 洋史(yojik)</h3>
	<h4>株式会社オージス総研</h4>
	<h4><a href="http://d.hatena.ne.jp/yojik" target="_blank">http://d.hatena.ne.jp/yojik</a></h4>
      </div>

      <div class="slide">
	<h1>ここからは歴史をさかのぼっていきます</h1>
	<h2>無理やり歴史区分に当てはめる</h2>
	<ul>
	  <li><font style="color:red">Part2(90年代末期-00年代前半)～近代:J2EEとアジャイル時代～</font> </li>
	  <li>Part3(90年代後半)～近世:コンポーネントと開発方法論時代～ </li>
	  <li>Part4(90年代前半)～中世:統合開発環境の時代～ </li>
	  <li>Part5(80年代後半)～古代:AI研究時代～</li>
	  <li>Part6(70年代-90年代)～先史時代:オブジェクト指向誕生の次代～</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>Part2(90年代末期-00年代前半) </h1>
	<h2>近代編 ～J2EEとアジャイル時代～ </h2>
	<p>
	  エンタープライズ分野ではJavaが主流の言語になった。
	  ベンダーによるアプリケーションサーバからデータベース、場合によっては開発プロセスまでを含めた垂直統合モデルが誕生した。
	</p>
	<p>
	  またそれとは相反する流れとしてアジャイルな開発方法論が提唱された
	</p>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
      </div>

      <div class="slide">
	<h1>JavaEE(J2EE)の歴史</h1>
	<ul>
	  <li>1999年に発表</li>
	  <li>Javaのエンタープライズ用APIセット</li>
	  <li>一つ前の時代の理想といえる分散コンポーネント指向</li>
	  <li>源流はIBMサンフランシスコフレームワークやCORBA関連の各仕様(トランザクションサービスなど)</li>
	  <li>コマンド(コントロール)とエンティティの分離はIBMサンフランシスコフレームワークから</li>
	  <li>ネーミングサービスやトランザクションサービスなど技術的な仕様はCORBAから</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>日本でのJ2EE(JavaEE)開発スタイル</h1>
	<h2>開発プロセス(RUP)の導入</h2>
	<ul>
	  <li>大人数が分担作業を行えるようなプロセス/アーキテクチャを選択</li>
	  <li>属人性の排除を念頭にしたプロセス(略</li>
	  <li>コンポーネント化の重視</li>
	  <li>なぜかイテレーション開発はしなかったり・・・</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>Javaとフレームワーク</h1>
	<h2>Strutsの普及</h2>
	<ul>
	  <li>開発者にフレームワークの概念が普及した</li>
	  <li>オープンソースのフレームワークが開発案件で利用されるようになった</li>
	  <li>MVCアーキテクチャの普及(本来のものとは違う)</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>Patterns of Enterprise Application Architecture</h1>
	<h2>PofEAAは大きなマイルストーン</h2>
	<ul>
	  <li>2000年以降のエンタープライズアプリの設計パターンの集大成</li>
	  <li>結果としてエンタープライズアプリ設計の「地図」になっている</li>
	  <li>Railsに直接影響を与えている</li>
	  <li>DDDに直接影響を与えている</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>モデリングブーム</h1>
	<h2>UMLの普及によりOOモデリングが流行</h2>
	<ul>
	  <li>オブジェクトの広場</li>
	  <li>オブジェクト倶楽部</li>
	  <li>各種書籍の出版</li>
	  <li>検定試験</li>
	  <li>MDA</li>
	</ul>
	<p>実際案件で利用された例は...</p>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
      </div>

      <div class="slide">
	<h1>アジャイルブーム</h1>
	<h2>重厚長大なプロセスに対するアンチテーゼ</h2>
	<ul>
	  <li>オブジェクト倶楽部での紹介</li>
	  <li>アジャイル関連の書籍等が大量に出版された</li>
	  <li>くわしくは以下のタイムラインで
	    <ul>
	      <li>http://timeline.nifty.com/portal/show/2242</li>
	    </ul>
	  </li>
	  <li>この頃からコミュニティ運動が流行りはじめた</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
      </div>

      <div class="slide">
	<h1>アジャイルブーム </h1>
	<h2>Extreme Programing(XP)</h2>
	<ul>
	  <li>XPの誕生は1999年</li>
	  <li>XPが日本に紹介されたのも同年</li>
	  <li>オブジェクトの広場の平鍋さんのインタビュー
	    <ul>
	      <li>http://www.ogis-ri.co.jp/otc/hiroba/others/OORing/interview06.html</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
      </div>

      <!-- =======================================================================================  -->
      <div class="slide">
	<h1>オープンソースブーム</h1>
	<h2>オープンソースが世界に認知されたのもこの時代</h2>
	<ul>
	  <li>エリック・S・レイモンド3部作が発表されたのが1998年</li>
	  <li>伽藍とバザール・ノウスフィアの開墾・魔法のおなべ</li>
	  <li>Netscape(Mozilla)のオープンソース化</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline2.png"/> -->
      </div>

      <!--
	<div class="slide">
	<h1>組み込みとオブジェクト指向</h1>
	<ul>
	<li>executable uml</li>
	<li>MDAとは微妙に毛色が違うかもしれない</li>
	<li>あとでかく</li>
	</ul>
	</div>
	-->

      <!-- =============================================== 雌伏編  ================================================ -->
      <div class="slide">
	<h1>Part3(90年代後半)</h1>
	<h2>近世編 ～コンポーネントと開発方法論時代～ </h2>
	<ul>
	  <li>Part2(90年代末期-00年代前半)～近代:J2EEとアジャイル時代～</li>
	  <li><font style="color:red">Part3(90年代後半)～近世:コンポーネントと開発方法論時代～</font> </li>
	  <li>Part4(90年代前半)～中世:統合開発環境の時代～ </li>
	  <li>Part5(80年代後半)～古代:AI研究時代～</li>
	  <li>Part6(70年代-90年代)～先史時代:オブジェクト指向誕生の次代～</li>
	</ul>

      </div>

      <div class="slide">
	<h1>Part3(90年代後半)</h1>
	<h2>近世編 ～コンポーネントと開発方法論時代～ </h2>
	<p>
	  90年代後半、開発方法論は統一への道を歩む。
	  またソフトウェア業界の永遠の夢であるソフトウェアの部品化について様々な試みが行われた。
	  JavaやRuby、Pythonといったオブジェクト指向言語の登場時期でもある
	</p>
	<!-- <img class="timeline" src="img/timeline3.png"/> -->
      </div>

      <div class="slide">
	<h1>コンポーネント指向の時代</h1>
	<h2>1990年代の業界の話題はコンポーネントと分散オブジェクト</h2>
	<p>今(00年代後半)の技術の伏線はこの頃にある!</p>
	<ul>
	  <li>DCOM＆COM</li>
	  <li>OpenDoc</li>
	  <li>CORBA関連の各種仕様</li>
	</ul>
	<ul>
	  <li>COMやOpenDocは現在のプラグインで構成されたアプリケーションの始祖</li>
	  <li>CORBAの各種仕様はJ2EE(JavaEE)に取り込まれている</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> --> 
      </div>

      <div class="slide">
	<h1>Javaの登場</h1>
	<h2>1995年Javaが正式リリースされた</h2>
	<ul>
	  <li>世間の一般的の受け止めかたはWebページを動的にするもの</li>
	  <li>プログラミング言語使いからは、Better C++ , 庶民化版Smalltalk</li>
	  <li>分散コンポーネントの実現手段として期待される
	    <ul>
	      <li>多様な実行環境が共存するネットワークで動作可能</li>
	      <li>ポータビリティのある実行コードのやりとり</li>
	      <li>ネットワーク経由でのクラスロード</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> --> 
      </div>

      <div class="slide">
	<h1>UMLの登場</h1>
	<h2>1996年にver0.9が登場</h2>
	<ul>
	  <li>1981年 Rational社誕生</li>
	  <li>90年代後半、Booch,Jacobson,RumbaughがRatinal社に移籍</li>
	  <li>各種開発方法論の表記法部分を統一した規格を発表した</li>
	  <li>UML CASEツール市場が誕生した</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> --> 
      </div>

      <div class="slide">
	<h1>開発プロセスの誕生</h1>
	<h2>UMLの登場後、開発プロセス(RUP)が生まれた</h2>
	<ul>
	  <li>Ratuonal社の製品は他のツール(構成管理,テスト)を取り込んで開発プロセス全般を担う</li>
	  <li>それに対応するようにRational Unified Processも誕生した</li>
	  <!--
	    <li>開発方法論は、分析、設計のやり方を中心にまとめたもの</li>
	    <li>プロセスは、構成管理やテスト、マネジメントを含めた開発全体をまとめたもの</li>
	  -->
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> -->
      </div>

      <div class="slide">
	<h1>パターン運動</h1>
	<h2>開発プロセスとは別の流れとしてパターン運動があった</h2>
	<p>基本理念は、コンピュータ・ユーザーが自分自身のプログラムを書くこと</h2>
	<ul>
	  <li>Alexsanderのパターンランゲージを源流とする</li>
	  <li>オブジェクト指向プログラムのためのパターン言語の使用(1987)</li>
	  <li>設計に特別なスキルや才能を必要としない事を理想とした</li>
	  <li>パターンランゲージは利用者と開発者の垣根を払う試み</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> -->
      </div>

      <div class="slide">
	<h1>パターン運動</h1>
	<h2>パターン運動のひろがり</h2>
	<ul>
	  <li>デザインパターン(1995)
	    <ul>
	      <li>Erich Gamma,Richard Helm,Ralph E. Johnson,John Matthew Vlissides,</li>
	    </ul>
	  </li>
	  <li>パターンコミュニティ
	    <ul>
	      <li>c2.com(最初のwiki)</li>
	      <li>国際会議 PLoP</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> -->
      </div>

      <div class="slide">
	<h1>日本でのパターン運動</h1>
	<h2>デザインパターン等が紹介された</h2>
	<ul>
	  <li>「オブジェクト指向における再利用のためのデザインパターン」</li>
	  <li>まさーるさんのページ</li>
	  <li>JPloP(Japan Pattern Language of Programming)</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> -->
      </div>

      <div class="slide">
	<h1>パターン運動は成功したか</h1>
	<ul>
	  <li>開発者のテクニック集としてパターンは成功</li>
	  <li>開発者とユーザの垣根を取り払う試みとしてはあまり成功してない</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline3.png"/> -->
      </div>
      
      <div class="slide">
	<h1>次代への伏線</h1>
	<p>Perl(1987),Ruby(1993?)やPython(1991)、PHP(1995)といった高機能スクリプト言語が広く認知された</p>
      </div>

      <div class="slide">
	<h1>Part4(90年代前半)</h1>
	<h2>中世編 ～統合開発環境の時代～ </h2>
	<ul>
	  <li>Part2(90年代末期-00年代前半)～近代:J2EEとアジャイル時代～</li>
	  <li>Part3(90年代後半)～近世:コンポーネントと開発方法論時代～</li>
	  <li><font style="color:red">Part4(90年代前半)～中世:統合開発環境の時代～</font> </li>
	  <li>Part5(80年代後半)～古代:AI研究時代～</li>
	  <li>Part6(70年代-90年代)～先史時代:オブジェクト指向誕生の次代～</li>
	</ul>


      </div>
      
      <div class="slide">
	<h1>Part4(90年代前半)</h1>
	<h2>中世編 ～統合開発環境の時代～ </h2>
	<p>
	  90年代初めは、統合開発環境がリリースされ開発手法が大きく変わりつつあった。またGUIが一般化した時期であり、ビジュアルプログラミングに期待がもたれていた。
	</p>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
      </div>

      <div class="slide">
	<h1>商用ビジュアル統合開発環境の登場</h1>
	<h2>Next InterfaceBuilder</h2>
	<ul>
	  <li>厳密には1998年登場</li>
	  <li>GUIビルダーをもつ最初期の開発環境(結構衝撃的)</li>
	  <li>Objective-Cを採用
	    <ul>
	      <li>この頃までは、C++とObjective-Cが「Better C」の立場を争っていた</li>
	      <li>遥か太古よりつづく「静的言語」対「動的言語」戦争</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
	<div class="notes">
	  Objective-CはSmalltalkの影響を受けて、VisualWorksはNextの影響を受けるというループがある
	</div>
      </div>
      

      <div class="slide">
	<h1>統合開発環境の時代</h1>
	<h2>InterfaceBuilderの影響を受けたIDEの登場</h2>
	<ul>
	  <li>VisualBasic</li>
	  <li>Delphi</li>
	  <li>VisualWorks(Smalltalk)
	  <li>FORTE(4GL)</li>
	  <li>Rational Environment(Ada)</li>
	  <li>etc</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>部品化とオブジェクト指向</h1>
	<h2>最初期のOOはGUIライブラリとセットで語られていた</h2>
	<ul>
	  <li>MVCやその後継(Smalltalk)</li>
	  <li>MacApp (Pascal)</li>
	  <li>Application Kit(Objective-C)</li>
	  <li>PowerPlant (C++)</li>
	  <li>MFC(C++)</li>
	  <li>VCL(Delphi)</li>
	  <li>Galaxy(C++)</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
	<div class="notes">
	  <p>
	    再利用可能な部品という意味でのクラスライブラリや、部品を動作させる枠組みとしてのフレームワークの実例としては最もわかりやすい
	  </p>
	</div>
      </div>

      <div class="slide">
	<h1>オブジェクト指向言語 in ビジネス案件</h1>
	<h2>例:VisualWorksによる日本のビジネス案件</h2>
	<ul>
	  <li>開発はC/SのUI部分中心</li>
	  <li>画面仕様書からつくる普通のクライアントアプリ</li>
	  <li>江川達也の作品「ゴールデンボーイ」にもVisualWorksがちょろっと出てくる!</li>
	</ul>
	<p>海外では金融、軍事、半導体などの業界でロジックを含めた案件例が多かった</p>
	<p>日本では確かに「別にVBでいいじゃん」的な開発が大半であった</p>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>開発方法論の誕生</h1>
	<h2>オブジェクト指向言語にあった開発手法が強く求められた</h2>
	<ul>
	  <li>オブジェクト指向言語を利用するためには、</li>
	  <li>オブジェクト指向言語を意識した設計が必要で、そのためには</li>
	  <li>システムの問題をオブジェクト指向で分析する必要があり、そのためには</li>
	  <li>新しい開発方法論が必要である</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>開発方法論の誕生</h1>
	<h2>開発方法論が重視された理由</h2>
	<ul>
	  <li>ソフトウェアの複雑化に由来するソフトウェア危機が叫ばれていた</li>
	  <li>このような時代の要請から開発方法論が提唱された</li>
	  <li>実は「人月の神話(1975)」のBrooksはOOが銀の弾丸かもしれないと発言した事がある
	    <ul>
	      <li>http://d.hatena.ne.jp/squeaker/20071024#p1</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>UML関係の書籍をあさると90年代初頭はまさに戦国時代</h2>
	<ul>
	  <li>Shlaer＆Mellor手法</li>
	  <li>Coad＆Yourdon法</li>
	  <li>OOSE</li>
	  <li>OMT</li>
	  <li>Booch</li>
	  <li>Object Behavior Analysis</li>
	</ul>
	<p>
	  様々なオブジェクト指向分析/設計技法が乱立した。
	</p>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
      </div>

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>二つの流れ</h2>
	<ul>
	  <li>オブジェクトやクラスの静的な構造を重視
	    <ul>
	      <li>Booch法,OMT法</li>
	      <li>UMLやMDAへの流れ</li>
	    </ul>
	  </li>
	  <li>オブジェクトの動的な振る舞いを重視
	    <ul>
	      <li>RDD(責務駆動設計),OBA</li>
	      <li>XPやDomainDrivenDesignへつながる</li>
	    </ul>
	  </li>
	</ul>
	<p>当初、日本では構造派が重視され、振る舞い派はあまり紹介されなかった</p>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
      </div>

      <div class="slide">
	<h1>開発方法論の流派</h1>
	<h2>大島さんの日記に書かれていたumejavaさんコメント</h2>
	<p>http://d.hatena.ne.jp/squeaker/20050208#c1107958142</p>
	<blockquote>
	  OMT, Booch <-> RDD, OBA, OOSE, OORAM などなどこのような手法の違いは、彼らがネイティブとしていたプログラミング言語によって生まれてきたといって、ほぼ間違いないと思います。ADA, C++ vs Smalltalk という図式が裏にあります。UMLは前者の人たちが大きな貢献をして出来ていったものと思います。
	</blockquote>
	<div class="notes">
	  後者は長い間、大多数のモデラーから、「図も描かない野蛮な人たち」とさげすまれてきたのですが、Kent BeckのXP伝導により、今ではある程度の市民権を得ることとなったのです。
	</div>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
      </div>

      <div class="slide">
	<h1>ソフトウェアの再利用性とオブジェクト指向</h1>
      	<h2>この頃からオブジェクト指向言語パラダイムを語る「言葉」が変わる</h2>
	<ul>
	  <li>かつてはオブジェクトとメッセージ交換が重視された</li>
	  <li>同期呼び出しでさえ、結果をwaitして待つメッセージ送信という説明がなされた</li>
	  <li>この頃からカプセル化、ポリモーフィズム、継承、抽象化が重視されるようになった</li>
	  <li>再利用性や部品化を強く主張する</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline4.png"/> -->
      	<div class="notes">
	  サクサクSmalltalkとか
	</div>
      </div>


      <!-- =============================================== 黎明期 ================================================ -->
      <div class="slide">
	<h1>Part5(80年代後半)</h1>
	<h2>古代編 ～AI研究時代～</h2>
	<ul>
	  <li>Part2(90年代末期-00年代前半)～近代:J2EEとアジャイル時代～</li>
	  <li>Part3(90年代後半)～近世:コンポーネントと開発方法論時代～ </li>
	  <li>Part4(90年代前半)～中世:統合開発環境の時代～ </li>
	  <li><font style="color:red">Part5(80年代後半)～古代:AI研究時代～</font></li>
	  <li>Part6(70年代-90年代)～先史時代:オブジェクト指向誕生の次代～</li>
	</ul>
      </div>

      <div class="slide">
	<h1>Part5(80年代後半)</h1>
	<h2>古代編 ～AI研究時代～</h2>
	<p>オブジェクト指向言語の日本への伝達の時代</p>
	<p>オブジェクト指向の黎明期(1980年代)、日本に最初のオブジェクト指向を伝えたのはLispハッカーだった!!</p>
	<!-- <img class="timeline" src="img/timeline5.png"/> -->
      </div>

      <div class="slide">
	<h1>日本への輸入1</h1>
	<h2>日本に最初にオブジェクト指向を体系的に紹介されたのは</h2>
	<ul>
	  <li>1983年</li>
	  <li>Bit誌の竹内郁雄(日本のLispハッカーの草分けの一人)さんによる短期連載</li>
	  <li>日本語で読める最初のSmalltalkの解説</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline5.png"/> -->
	<div class="notes">
	  和田研究室のことも乗せておく。(あとでかく)
	</div>
      </div>      
      
      <div class="slide">
	<h1>日本企業でのオブジェクト指向</h1>
	<h2>富士ゼックス、富士ゼロックス情報システム</h2>
	<p>OO関連の人材を輩出</p>
	<ul>
	  <li>青木淳氏(Smalltalk)</li>
	  <li>羽生田栄一氏(UML)</li>
	  <li>阿部 和広氏(Squeak)</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline5.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>初期のOO</h1>
	<h2>当時のオブジェクト指向はAIの一分野</h2>
	<ul>
	  <li>AI</li>
	  <li>発想支援システム
	    <ul>
	      <li>マインドマップみたいなもの</li>
	    </ul>
	  </li>
	  <li>当時はAI研究が盛んだった
	    <ul>
	      <li>第五世代コンピュータなど</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline5.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>Star/JStar</h1>
	<h2>当時最強のオブジェクト指向環境</h2>
	<ul>
	  <li>最初にSmalltalkを走らせたマシンがAlto</li>
	  <li>Star は Alto の後継ハードウエア（D-マシン）に Star システム（後に ViewPoint）を載せたもの。</li>
	  <li>オブジェクト指向デスクトップ</li>
	  <li>Smalltalk専用の環境ではなくInterlisp,Mesaなど様々な環境を動作可能</li>
	  <li>現在のユニコードより優れたコード体系などを備えてた</li>
	  <li>らしいです。</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline5.png"/> -->
	<div class="notes"></div>
      </div>

      <!-- ======================================================================================== -->

      <div class="slide">
	<h1>Part6(70年代-80年代)</h1>
	<h2>先史時代編 ～黎明期～</h2>
	<ul>
	  <li>Part2(90年代末期-00年代前半)～近代:J2EEとアジャイル時代～</li>
	  <li>Part3(90年代後半)～近世:コンポーネントと開発方法論時代～ </li>
	  <li>Part4(90年代前半)～中世:統合開発環境の時代～ </li>
	  <li>Part5(80年代後半)～古代:AI研究時代～</font></li>
	  <li><font style="color:red">Part6(70年代-90年代)～先史時代:オブジェクト指向誕生の次代～</font></li>
	</ul>
      </div>


      <div class="slide">
	<h1>Part6(70年代-80年代)</h1>
	<h2>先史時代編 ～黎明期～</h2>
	<p>オブジェクト指向誕生の時代。現在の我々から見れば伝説と神話の時代</p>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>オブジェクト指向言語の誕生</h1>
	<h2>Simula(1968)</h2>
	<ul>
	  <li>(一般的に語られている)オブジェクト指向言語の基本的な概念をそなえる</li>
	  <li>クラス指向言語</li>
	  <li>名前のとおり離散シミュレーションのための言語</li>
	  <li>Simula自身はオブジェクト指向言語を名乗っていなかった</li>
	  <li>ノルウェー産(北欧か!)</li>
	</ul>
	<!-- <!-- <img class="timeline" src="img/timeline6.png"/> --> -->
      </div>

      <div class="slide">
	<h1>オブジェクト指向言語の誕生</h1>
	<h2>Smalltalk(1971,1972,1980)</h2>
	<ul>
	  <li>SimulaやLisp、ロゴの影響を受けている</li>
	  <li>オブジェクト指向言語</li>
	  <li>明確に「オブジェクト指向」というコンセプトを元に実装された最初の言語</li>
	  <li>細胞(セル)としてのオブジェクトが、メッセージをやり取りすることによって、複雑な処理を実行するというメタファ</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
      </div>
      
      <div class="slide">
	<h1>オブジェクト指向言語の誕生</h1>
	<h2>C++(1979,1983)</h2>
	<ul>
	  <li>1979年にBjarne StroustrupによりC言語の拡張機能として開発開始(C with Classes)</li>
	  <li>1983年にC++に改称</li>
	  <li>C++は単なるOO言語ではなく、マルチパラダイム言語</li>
	  <li>C++のOO部分はSimulaの影響を受けている</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
	<div class="notes"></div>
      </div>

      <div class="slide">
	<h1>オブジェクト指向言語の誕生</h1>
	<h2>Objective-C(1983)</h2>
	<ul>
	  <li>1983年にBrad Coxにより開発される</li>
	  <li>Cの上位互換の言語仕様</li>
	  <li>オブジェクト関連の機能はSmalltalkの影響を強く受けている</li>
	  <li>実行時のクラス拡張機能などをもち、動的なオブジェクト指向言語</li>
	  <li>Javaに影響を及ぼしている</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
	<div class="notes"></div>
      </div>
      
      <div class="slide">
	<h1>オブジェクト指向における二つの流れ</h1>
	<h2>静的と動的</h2>
	<ul>
	  <li>
	    静的とはクラス指向、プログラムが動き出す前に正確な世界を構築し、動作させる。
	  </li>
	  <li>
	    動的とはメッセージ指向、プログラムを動かしながら世界を変更していく
	  </li>
	</ul>
	<p>
	  この流れが、現在のプロセスや言語に影響を与えている。(と思う)
	</p>
	<p>
	  この二つの流れがずっーと尾を引いているのだ
	</p>
	<div class="notes">
	  なお、当初「オブジェクト指向」は、この“オブジェクトへのメッセージ送信”を意味するものであったが、後に C++ の設計者であるビアルネ・ストラウスラップが 1986年に発表した“抽象データ型のスーパーセット”という「カプセル化、継承、多態性」に代表される考え方に置き換えられてゆくことになる。現在は、両者をミックスした概念で語られることが多く、これが「オブジェクト指向」を難解なキーワードにしてしまう原因のひとつとも考えられる。また、“オブジェクト指向プログラミング言語”に２つの元祖があるのはこうした背景による（後者の「オブジェクト指向」の立場での元祖は SIMULA ）。
	</div>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
      </div>
      <div class="slide">
	<h1>初期オブジェクト指向にあった共通概念</h1>
	<h2>静的OO言語でも動的OO言語でも共通のテーマがある</h2>
	<ul>
	  <li>分散という概念が重要だった</li>
	  <li>ソフトウェアを単純に分割するだけじゃなく、オブジェクト自体が独立して動く世界を目指していた</li>
	  <li>カール・ヒューイットによるActor理論のような理論的基盤も作成された</li>
	  <li>分散処理は計算機リソースが限られた時代の要請でもあった
	    <ul>
	      <li>(Multicsなどもこの頃)</li>
	    </ul> 
	  </li>
	  <li>しかし当時の環境ではあまりに野心的な試みだった</li>
	</ul>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
      </div>

      <div class="slide">
	<h1>OO厨々トレイン</h1>
	<h2>未来編</h2>
	<h3>大村 伸吾</h3>
	<h4>株式会社オージス総研</h4>
      </div>

      <div class="slide">
	<h1>Part7(未来編)</h1>
	<h2>オブジェクト指向から見えてくる近未来！？ </h2>
     	<ul>
	  <li>多種多様なDSLの出現</li>
	  <li> 関数（宣言）型言語の普及
	    <ul>
	      <li>オブジェクト指向言語と関数型言語の融合</li>
	    </ul>
	  </li>
	  <li>分散処理から分散プログラミングへ
            <ul>
	      <li>（アクターモデルプログラミングへ）</li>
	    </ul>
	  </li>
	</ul>
	<!-- <img class="timeline" src="img/timeline6.png"/> -->
      </div>
      

      <div class="slide">
	<h1>多様なDSLの出現 </h1>
	<h2>背景</h2>
	<ul>
	  <li>DDDによるドメインを重要視した開発</li>
	  <li>特定ドメインの処理を汎用言語で処理することへの疑問</li>
	</ul>
	<h2>要求される技術</h2>
	<ul>
	  <li>良いDSLを設計できるドメインスペシャリスト</li>
          <li>DSL処理系を効率よく生み出せる手段
	    <ul>
	      <li>関数型言語によるパーサジェネレータ</li>
	      <li>RubyのブロックやLispのマクロといった言語内DSLに使える機能</li>
	      <li>ランゲージワークベンチ</li>
	  </li>
	</ul>
      </div>
 
      <div class="slide">
	<h1>オブジェクト指向言語と関数型言語の融合</h1>
	<h2>以下のような力をもった言語が必要になる</h2>
	<ul>
	  <li>関数型言語のパワーをつかった宣言的なDSL定義</li>
          <li>オブジェクト指向技術の遺産の活用</li>
	  <li>必要に応じて関数型っぽく、オブジェクト指向っぽく記述できる、記述容易性</li>
	</ul>
	オブジェクト指向の言語と関数型言語の特性をもった言語が望ましい。
	Scalaなど
      </div>
 
      <div class="slide">
	<h1>分散処理から分散プログラミングへ</h1>
	<h2>背景</h2>
	<ul>
	  <li>大量のリクエスト処理するアプリケーションの&台頭</li>
          <li>Mooreの法則の崩壊を視野に入れたCPUのメニーコア化</li>
	  <!-- これ意味教えて + 同時に複数の処理の流れを局所的に作ることが必要 -->
          <li>「分散」が単な処理方式ではなくソフトウェア設計の基本的なパラダイムへ</li>
	</ul>
      </div>

     <div class="slide">
       <h1>分散処理から分散プログラミングへ</h1>
       <h2>必要となる技術</h2>
       <ul>
	 <li>アクターモデル,π計算の適用</li>
	 <li>複数の計算主体が、通信しながら全体としての計算を進めていく</li>
	 <li>メッセージ処理のためのガードや強力なパターンマッチングなどの処理 </li>
         <li>アクター指向をサポートした言語 (Scala等)</li>
       </ul>
     </div>
 
     <div class="slide">
       <h1>分散処理から分散プログラミングへ</h1>
       <h2>ちなみに</h2>
       <p>アクター理論はオブジェクト指向の影響をモロに受けています</p>
     </div>


      
      <div class="slide">
	<h1>Part8(まとめ) ～時代は廻る～</h1>
	<p>過去の人たちも同じような問題に同じように悩んでた!! それを知り引き継いで先に進もう</p>
	<ul>
	  <li>因果は円環ではなく螺旋なのです(ベルセルク)</li>
	  <li>一回転すればほんの少しだけ前に進む、それがドリルなんだよ！！(グレンラガン)</li>
	  <li>過去が希望をくれる(仮面ライダー電王)</li>
	  <li>温故知新(論語為政篇)</li>
	</ul>
	<div class="notes"></div>
      </div>
      <div class="slide">
	<h1>参考URL</h1>
	<ul>
	  <li>http://d.hatena.ne.jp/sumim/20040525/p1</li>
	  <li>http://d.hatena.ne.jp/suikan/20040419/1119010908</li>
	  <li>http://hp.vector.co.jp/authors/VA030421/ym030701.htm</li>
	  <li>http://sumim.no-ip.com:8080/collab/19</li>
	  <li>http://sumim.no-ip.com:8080/collab/24</li>
	  <li>http://ja.wikipedia.org/wiki/C++</li>
	  <li>http://www.thinkit.co.jp/free/compare/12/1/</li>
	  <li>http://www.s-lagoon.co.jp/OOAD2003.html</li>
	  <li>http://heim.ifi.uio.no/~trygver/1997/9710-OOPSLA/sec1.htm</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>ありがとうございました</h1>
	<p>
	  突っ込み大歓迎でございます!!
	</p>
	<h2>Thanks To ... </h2>
	<ul>
	  <li>羽生田栄一さん</li>
	  <li>kazumi007君</li>
	  <li>umejavaさん</li>
	  <li>yyamanoさん</li>
	  <li>オブジェクト倶楽部のみなさん</li>
	  <li>オブジェクトの広場のみなさん</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>付録</h1>
	<a href="ootrain.svg">全体像</a>
      </div>

      
    </body>
</html>



