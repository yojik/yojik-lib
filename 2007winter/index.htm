<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"  xml:lang="ja" lang="ja">
  <head>
    <!--
      テストああああいいいうううえええおおお
      #xyzzyが一発で日本語判定するように日本語を最初に書いてます。。-->
    <title>OO厨厨トレイン</title>
    <!-- metadata -->
    <meta name="generator" content="S5" />
    <meta name="version" content="S5 1.3" />
    <meta name="author" content="Eric A. Meyer" />
    <meta name="company" content="Complex Spiral Consulting" />
    <!-- meta extensions -->
    <meta name="subject" content="S5 1.3beta7" />
    <meta name="creator" content="Christian Effenberger" />
    <meta name="contributor" content="youcan[64]netzgesta[46]de" /><meta name="publisher" content="s5.netzgesta.de" /><meta name="description" content="S5 1.3 is a very flexible and lightweight slide show system available for anyone to use (including transitions and scalable fonts and images)" /><meta name="keywords" content="S5, slide show, projection-mode, powerpoint-like, scala-like, keynote-like, incremental display, scalable fonts, scalable images, transitions, notes, osf, xoxo, css, javascript, xhtml, public domain" /><meta name="robots" content="index, follow" />
    <meta name="revisit-after" content="7 days" />
    <!-- meta temporary -->
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Script-Type" content="text/javascript" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <!-- configuration parameters -->
    <meta name="defaultView" content="slideshow" />
    <meta name="controlVis" content="hidden" />
    <!-- configuration extensions -->
    <meta name="tranSitions" content="true" />
    <meta name="fadeDuration" content="500" />
    <meta name="incrDuration" content="250" />
    <!-- style sheet links -->
    <link rel="stylesheet" href="ui/advanced_gfx/slides.css" type="text/css" media="projection" id="slideProj" />
    <link rel="stylesheet" href="ui/advanced_gfx/outline.css" type="text/css" media="screen" id="outlineStyle" />
    <link rel="stylesheet" href="ui/advanced_gfx/print.css" type="text/css" media="print" id="slidePrint" />
    <link rel="stylesheet" href="ui/advanced_gfx/opera.css" type="text/css" media="projection" id="operaFix" />
    <!-- embedded styles -->
    <style type="text/css" media="all">
      .imgcon {width: 100%; margin: 0 auto; padding: 0; text-align: center;}
      #anim {width: 33%; height: 320px; position: relative;}
      #anim img {position: absolute; top: 0px; left: 0px;}
      .logo {margin: 0.2em 0 0 0.15em; padding: 0;}
      .clock {margin: 0.1em 0.2em; padding: 0; position: absolute; top: 0em; right: 0em;}
      .red   {color: #C02;}
      .green {color: green;}
    </style>
    <!-- S5 JS -->
    <script src="ui/advanced_gfx/slides.js" type="text/javascript"></script>
  </head>
  <body>
    <div class="layout">
      <div id="controls"><!-- DO NOT EDIT --></div>
      <div id="currentSlide"><!-- DO NOT EDIT --></div>
      <div id="header">
	<img class="scale logo" width="96" height="75" src="pix/logo.png" alt="S5" title="S5" />
	<object type="application/x-shockwave-flash" data="obj/flash/relog.swf" width="80" height="80" class="scale clock" classid="CLSID:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://active.macromedia.com/flash2/cabs/swflash.cab#version=6,0,0,0">
	  <param name="movie" value="obj/flash/relog.swf" />
	  <param name="wmode" value="transparent" />
	  <param name="quality" value="high" />
	  <param name="menu" value="true" />
	  <param name="bgcolor" value="#6B6B6F" />
	</object>
      </div>

      <div id="footer">
	<h1><span class="red">OO</span>トレイン</h1>
	<p>オブジェクト指向の現在過去未来</p>
      </div>
    </div>

    <div class="presentation">
      <div class="slide">
	<h1><span class="red">OO</span><span class="green">厨</span>トレイン(仮題)</h1>
	<h2>～オブジェクト指向の現在過去未来(過去編)～</h2>
	<h3>Yoji.Kanno</h3>
	<h4><a href="http://www.ogis-ri.co.jp" rel="external">株式会社 オージス総研</a></h4>
	<h4><a href="http://d.hatena.ne.jp/yojik/" rel="external">http://d.hatena.ne.jp/yojik/</a></h4>
	<div class="handout"></div>
      </div>
      <div class="slide">
	<h1>参考URL</h1>
	<ul>
	  <li>http://d.hatena.ne.jp/sumim/20040525/p1</li>
	  <li>http://d.hatena.ne.jp/suikan/20040419/1119010908</li>
	  <li>http://hp.vector.co.jp/authors/VA030421/ym030701.htm</li>
	  <li>http://sumim.no-ip.com:8080/collab/19</li>
	  <li>http://sumim.no-ip.com:8080/collab/24</li>
	  <li>http://ja.wikipedia.org/wiki/C++</li>
	  <li>http://www.thinkit.co.jp/free/compare/12/1/</li>
	</ul>
      </div>

      <div class="slide">
	<h1>管理用ページ</h1>
	<h2></h2>
	<ul>
	  <li>羽生田さんの内容追加</li>
	  <li>Partの再検討</li>
	  <li>Part内の構成見直し</li>
	  <li>ボリューム感見直し</li>
	</ul>
	</ul>
      </div>
      
      <div class="slide">
	<h1>旅の準備</h1>
	<h2>オブジェクト指向って何</h2>
	<ul>
	  <li>言語パラダイム</li>
	  <li>分析設計技法</li>
	  <li>開発プロセス?</li>
	  <li>考え方?</li>
	</ul>
	<p>
	  言語パラダイムからスタートして用法が拡大してきている。
	  ここでは敢えて区別しない!!
	</p>
	<div class="handout"></div>
      </div>
      
      <div class="slide">
	<h1>もくじ</h1>
	<ul>
	  <li>Part1(現代)</li>
	  <li>Part2(90年代末期-00年代前半)～J2EEとアジャイル時代～ </li>
	  <li>Part3(90年代後半)～コンポーネントと開発方法論時代～ </li>
	  <li>Part4(90年代前半)～統合開発環境の時代～ </li>
	  <li>Part5(80年代後半)～研究時代～</li>
	  <li>Part6(70年代-90年代)</li>
	  <li>Part7(未来編)</li>
	  <li>Part8(まとめ</li>
	</ul>
	<p>
	  言語パラダイムからスタートして用法が拡大してきている。
	  ここでは敢えて区別しない!!
	</p>
	<div class="handout"></div>
      </div> 
      

      <!-- =======================================================================================  -->
      <div class="slide">
	<h1>Part1(現代)</h1>
	<h2>佐藤君よろしく</h2>
	<p>
	  DDDやRailsやSOA
	</p>
      </div>
      

      <!-- =======================================================================================  -->
      <div class="slide">
	<h1>Part2(90年代末期-00年代前半)</h1>
	<h2>～J2EEとアジャイル時代～ </h2>
	<p>
	  エンタープライズ分野ではJavaが主流の言語になった。
	  ベンダーによるアプリケーションサーバからデータベース、場合によっては開発プロセスまでを含めた垂直統合モデルが誕生した。
	</p>
      </div>

      <div class="slide">
	<h1>JavaEE(J2EE)の歴史</h1>
	<ul>
	  <li>1999年に発表</li>
	  <li>Javaのエンタープライズ用APIセット</li>
	  <li>当初はやはり一つ前の時代の理想といえる分散コンポーネント技術を指向していた</li>
	  <li>IBMサンフランシスコフレームワークやCORBA関連の各仕様(トランザクションサービスなど)を源流とする</li>
	  <li>コマンド(コントロール)とエンティティの分離はIBMサンフランシスコフレームワークから強く影響を受けている</li>
	  <li>ネーミングサービスやトランザクションサービスなど技術的な仕様はCORBAの影響を強く受けている</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>日本でのJ2EE(JavaEE)開発スタイル</h1>
	<h2>開発プロセス(RUP)の導入</h2>
	<ul>
	  <li>大人数が分担作業を行えるようなプロセス/アーキテクチャを選択</li>
	  <li>属人性の排除を念頭にした、プロセス(略</li>
	  <li>コンポーネント化の重視</li>
	  <li>なぜかイテレーション開発はしない</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>Javaとフレームワーク</h1>
	<h2>Strutsの普及</h2>
	<ul>
	  <li>開発者にフレームワークの概念が普及した</li>
	  <li>オープンソースのフレームワークが開発案件で利用されるようになった</li>
	  <li>MVCアーキテクチャの普及(本来のものとは違う)</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>PofEAA</h1>
	<h2>PofEAAは大きなマイルストーン</h2>
	<ul>
	  <li>2000年以降のエンタープライズアプリの設計パターンの集大成</li>
	  <li>結果としてエンタープライズアプリ設計の「地図」になっている</li>
	  <li>Railsに直接影響を与えている</li>
	  <li>DDDに直接影響を与えている</li>
	</ul>
	<div class="handout"></div>
      </div>
      
      
      
      <div class="slide">
	<h1>モデリングブーム</h1>
	<h2>UMLの普及によりOOモデリングが流行</h2>
	<ul>
	  <li>オブジェクトの広場</li>
	  <li>オブジェクト倶楽部</li>
	  <li>各種書籍の出版</li>
	  <li>検定試験</li>
	  <li>MDA</li>
	</ul>
	<p>実際案件で利用された例は...</p>
      </div>
   
      

      <div class="slide">
	<h1>アジャイルブーム</h1>
	<h2>重厚長大なプロセスに対するアンチテーゼ</h2>
    	
	<ul>
	  <li>オブジェクト倶楽部での紹介</li>
	  <li>アジャイル関連の書籍等が大量に出版された</li>
	  <li>くわしくは以下のタイムラインで
	    <ul>
	      <li>http://timeline.nifty.com/portal/show/2242</li>
	    </ul>
	  </li>
	  <li>この頃からコミュニティ運動が流行りはじめた</li>
	</ul>
      </div>

      <div class="slide">
	<h1>アジャイルブーム </h1>
	<h2>extreame programing</h2>
	<ul>
	  <li>XPの誕生は1999年</li>
	  <li>XPが日本に紹介されたのも同年(タイムラグというものは存在しない)</li>
	  <li>オブジェクトの広場の平鍋さんのインタビュー
	    <ul>
	      <li>http://www.ogis-ri.co.jp/otc/hiroba/others/OORing/interview06.html</li>
	    </ul>
	  </li>
	</ul>
      </div>

      <!-- =======================================================================================  -->
      <div class="slide">
	<h1>オープンソースブーム</h1>
	<h2>オープンソースが世界に認知されたのもこの時代</h2>
	<ul>
	  <li>エリック・S・レイモンド3部作が発表されたのが1998年</li>
	  <li>伽藍とバザール・ノウスフィアの開墾・魔法のおなべ</li>
	  <li>Netscape(Mozilla)のオープンソース化</li>
	</ul>
      </div>
      
      <!-- 
      <div class="slide">
	<h1>組み込みとオブジェクト指向</h1>
	<ul>
	  <li>executable uml</li>
	  <li>MDAとは微妙に毛色が違うかもしれない</li>
	  <li>あとでかく</li>
	</ul>
      </div>
      -->
      
      <!-- =============================================== 雌伏編  ================================================ -->
      <div class="slide">
	<h1>Part3(90年代後半)</h1>
	<h2>～コンポーネントと開発方法論時代～ </h2>
	<p>
	  90年代後半、開発方法論は統一への道を歩む。
	  またソフトウェア業界の永遠の夢であるソフトウェアの部品化について様々な試みが行われた。
	  JavaやRuby、Pythonといったオブジェクト指向言語の登場時期でもある
	  
	</p>
      </div>

      <div class="slide">
	<h1>コンポーネント指向の時代</h1>
	<h2>1990年代の業界の話題はコンポーネントと分散オブジェクト</h2>
	<p>今(00年代後半)の技術の伏線はこの頃にある!</p>
	<ul>
	  <li>DCOM＆COM</li>
	  <li>OpenDoc</li>
	  <li>CORBA関連の各種仕様</li>
	</ul>
	<ul>
	  <li>COMやOpenDocは現在のプラグインで構成されたアプリケーションの始祖</li>
	  <li>CORBAの各種仕様はJ2EE(JavaEE)に取り込まれる</li>
	</ul>
      </div>

      <div class="slide">
	<h1>Javaの登場</h1>
	<h2>1995年Javaが正式リリースされた</h2>
	<ul>
	  <li>世間の一般的の受け止めかたはWebページを動的にするもの</li>
	  <li>プログラミング言語使いからは、Better C++ , 庶民のSmalltalk</li>
	  <li>分散コンポーネントの実現手段として期待された
	    <ul>
	      <li>多様な実行環境が共存するネットワークでの分散処理</li>
	      <li>ポータビリティのある実行コードのやりとり</li>
	    </ul>
	  </li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>UMLの登場</h1>
	<h2>1996年にver0.9が登場</h2>
	<ul>
	  <li>1981年 Rational社誕生</li>
	  <li>90年代後半、Booch,Jacobson,RumbaughがRatinal社に移籍</li>
	  <li>各種開発方法論の表記法部分を統一した規格を発表した</li>
	  <li>UML CASEツール市場が誕生した</li>
	  <li>UML CASEは他のツール(構成管理,テスト)を取り込んで開発プロセス全般を担うようになる</li>
	  <li>それに対応するようにRational Unified Processも誕生</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>開発プロセスの誕生</h1>
	<h2>UMLの登場後、開発プロセス(RUP)が生まれた</h2>
	<ul>
	  <li>開発方法論は、分析、設計のやり方を中心にまとめたもの</li>
	  <li>プロセスは、構成管理やテスト、マネジメントを含めた開発全体をまとめたもの</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>パターン運動</h1>
	<h2>開発プロセスとは別の流れとしてパターン運動があった</h2>
	<p>基本理念は、コンピュータ・ユーザーは自分自身のプログラムを書くこと</h2>
	<ul>
	  <li>1987年 :オブジェクト指向プログラムのためのパターン言語の使用
	    <ul>
	      <li>Ward Cunningham and  Kent Beck</li>
	      <li>http://capsctrl.que.jp/kdmsnr/wiki/transl/?UsingPatternLanguagesForOOP</li>
	    </ul>
	  </li>
	  <li>ユーザと開発者を近づけようとする試みである</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>パターン運動</h1>
	<h2>パターン運動のひろがり</h2>      
	<ul>
	  <li>1995年 : デザインパターン
	    <ul>
	      <li>Erich Gamma,Richard Helm,Ralph E. Johnson,ohn Matthew Vlissides,</li>
	    </ul>
	  </li>
	  <li>パターンコミュニティ
	    <ul>
	      <li>c2.com(最初のwiki)</li>
	      <li>国際会議 PLoP</li>
	    </ul>
	  </li>
	</ul>
      </div>

      <div class="slide">
	<h1>日本でのパターン運動</h1>
	<h2>デザインパターン等が紹介された</h2>
	<ul>
	  <li>「オブジェクト指向における再利用のためのデザインパターン」</li>
	  <li>まさーるさんのページ</li>
	  <li>JPloP</li>
	</ul>
      </div>

      <div class="slide">
	<h1>パターン運動は成功したか</h1>
	<h2>成功したとはいいづらい</h2>
	<ul>
	  <li>「知識」としてパターンが認知された</li>
	  <li>開発者とユーザの垣根を取り払う試みはあまり成功してない</li>
	</ul>
      </div>
     
            
      <!-- =============================================== 野望編  ================================================ -->
      <div class="slide">
	<h1>Part4(90年代前半)</h1>
	<h2>～統合開発環境の時代～ </h2>
	<p>
	  90年代初めは、統合開発環境がリリースされ開発手法が大きく変わりつつあった。またGUIが一般化した時期であり、ビジュアルプログラミングに期待がもたれていた。
	</p>
      </div>

      <div class="slide">
	<h1>統合開発環境としてのVisualWorks</h1>
	<h2>ビジネスの世界に普及したSmalltalk</h2>
	<p>当時画期的な統合開発環境<br>だった・・・</p>
	<ul>
	  <li>PARCからスピンオフしたObjectWorksからリリース</li>
	  <li>ビジュアルな画面設計が可能だった</li>
	  <li>Smalltalk環境としては商用可能レベルまで完成された初の製品</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>統合開発環境の時代</h1>
	<h2>VisualWorksの影響を受けたIDEの登場</h2>
	<ul>
	  <li>FORTE(4GL)</li>
	  <li>Rational Environment(Ada)</li>
	  <li>Delphi</li>
	  <li>VB</li>
	  <li>etc</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>部品化とオブジェクト指向</h1>
	<h2>最初期のOOはGUIライブラリとセットで語られていた</h2>
	<ul>
	  <li>MVCやその後継(Smalltalk)</li>
	  <li>MacApp (Pascal)</li>
	  <li>PowerPlant (C++)</li>
	  <li>MFC(C++)</li>
	  <li>VCL(Delphi)</li>
	  <li>Galaxy(C++)</li>
	</ul>
	<div class="handout">
	  <p>
	    再利用可能な部品という意味でのクラスライブラリや、部品を動作させる枠組みとしてのフレームワークの実例としては最もわかりやすい
	  </p>
	</div>
      </div>

      
      <div class="slide">
	<h1>ビジネスでのSmalltalkの適用</h1>
	<h2>VisualWorksによるビジネス案件への適用</h2>
	<ul>
	  <li>金融系業界や半導体業界でSmalltalkは使われていた</li>
	  <li>江川達也の作品「ゴールデンボーイ」にもVisualWorksがちょろっと出てくるよ!</li>
	  <li>開発はC/SのUI部分中心</li>
	  <li>開発方法論はOOとはかけ離れていたもの
	    <ul>
	      <li>画面仕様書とデータ仕様書から作成</li>
	    </ul>
	  </li>
	</ul>
	<div class="handout"></div>
      </div>            
      
      

      <!--
      <div class="slide">
	<h1>ソフトウェアの再利用性とオブジェクト指向</h1>
	<ul>
	  <li>この頃からオブジェクト指向がソフトウェアの再利用性、生産性に寄与する</li>
	  <li>オブジェクト指向言語パラダイムを語る「言葉」が変質してきている
	    <ul>
	      <li>カプセル化、ポリモーフィズム、継承、など</li>
	      <li>再利用性や部品化を強く主張する</li>
	    </ul>
	  </li>
	</ul>
	<div class="handout"></div>
      </div>
      -->
      
      
      <div class="slide">
	<h1>オブジェクト指向パラダイムの広がり</h1>
	<h2>以下のようにボトムアップから「オブジェクト指向」の意味が広がった</h2>
	<p>
	  <ul>
	    <li>オブジェクト指向言語を利用するためには、、</li>
	    <li>オブジェクト指向言語を意識した設計が必要で、そのためには</li>
	    <li>システムの問題をオブジェクト指向で分析する必要があり、そのためには</li>
	    <li>新しい開発方法論が必要である</li>
	  </p>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>オブジェクト指向パラダイムの広がり</h1>
	<h2>開発方法論が重視された理由</h2>

	<ul>
	  <li>当時は日本でも世界でもソフトウェア危機が叫ばれていた</li>
	  <li>ソフトウェアの複雑化にも不安があり、プロジェクトの殆どが望んだ結果にならない</li>
	  <li>このような時代の要請があった</li>
	  <li>「人月の神話(1975)」のBrooksはOOが銀の弾丸かもしれないと発言した事がある
	    <ul>
	      <li>http://d.hatena.ne.jp/squeaker/20071024#p1</li>
	    </ul>
	  </li>
	</ul>
	<div class="handout"></div>
      </div>

      

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>UML関係の書籍をあさると90年代初頭はまさに戦国時代</h2>
	<ul>
	  <li>Shlaer＆Mellor手法</li>
	  <li>Coad＆Yourdon法</li>
	  <li>OOSE</li>
	  <li>OMT</li>
	  <li>Booch</li>
	</ul>
	<p>
	  様々なオブジェクト指向分析/設計技法が乱立した。
	</p>
      </div>

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>二つの流れ</h2>
	<ul>
	  <li>オブジェクトやクラスの静的な構造を重視する流派(Booch法,OMT法など）
	    <ul>
	      <li>図によって構造を表現し、モデルの正当性を検証する</li>
	      <li>図による振る舞いの表現には限界があり、そこはプログラマに任せる</li>
	    </ul>
	  </li>
	  <li>オブジェクトの動的な振る舞いを重視する流派(OOSE,Rebecca Wirfs-BlockとかKent Beck)
	    <ul>
	      <li>コードを実行することにより、オブジェクトの振る舞いや相互作用を検証する</li>
	      <li>形式的な図は記述せず、メモやCRCカードなどを利用する</li>
	    </ul>
	  </li>
	</ul>
	<p>当初、日本では構造派が重視され、振る舞い派はあまり紹介されなかった</p>
      </div>

      <div class="slide">
	<h1>開発方法論の流派</h1>
	<h2>大島さんの日記に書かれていたumejavaさんコメント</h2>
	<p>http://d.hatena.ne.jp/squeaker/20050208#c1107958142</p>
	<blockquote>
	  
	    OMT, Booch <-> RDD, OBA, OOSE, OORAM などなどこのような手法の違いは、	彼らがネイティブとしていたプログラミング言語によって生まれてきたといって、ほぼ間違いないと思います。
	</blockquote>
	<div class="notes">
	  ADA, C++ <-> Smalltalk という図式が裏にあります。UMLは前者の人たちが大きな貢献をして出来ていったものと思います。後者は長い間、大多数のモデラーから、「図も描かない野蛮な人たち」とさげすまれてきたのですが、Kent BeckのXP伝導により、今ではある程度の市民権を得ることとなったのです。
	</div>
      </div>



      <!-- =============================================== 黎明期 ================================================ -->
      <div class="slide">
	<h1>Part5 黎明編</h1>
	<p>オブジェクト指向(言語)の誕生と日本への伝達の時代</p>
	<p>オブジェクト指向の黎明期(1980年代)、日本に最初のオブジェクト指向を伝えたのはLispハッカーだった!!</p>
      </div>

      <div class="slide">
	<h1>日本への輸入</h1>
	<h2>オブジェクト指向が日本に最初に紹介されたのは</h2>
	<ul>
	  <li>1983年</li>
	  <li>Bit誌の竹内郁雄(日本のLispハッカーの草分け)さんによる短期連載</li>
	  <li>日本語で読めるSmalltalkの解説</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>日本企業でのオブジェクト指向</h1>
	<h2>富士ゼックス、富士ゼロックス情報システム</h2>
	<p>OO関連の人材を輩出</p>
	<ul>
	  <li>青木淳氏(Smalltalk)</li>
	  <li>羽生田栄一氏(UML)</li>
	  <li>阿部 和広氏(Squeak)</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>初期のOO</h1>
	<h2>当時のオブジェクト指向はAIの一分野</h2>
	<ul>
	  <li>AI</li>
	  <li>発想支援システム</li>
	  <li></li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>Star/JStar</h1>
	<h2>当時最強のオブジェクト指向環境</h2>
	Alto、Star、Smalltalk、Lisa、Mac、Win の関係をはっきりさせよう
	http://sumim.no-ip.com:8080/collab/19
	<ul>
	  <li>最初にSmalltalkを走らせたマシンがAlto</li>
	  <li>Star は Alto の後継ハードウエア（D-マシン）に Star システム（後に ViewPoint）を載せたもの。</li>
	  <li>オブジェクト指向デスクトップ</li>
	  <li>Smalltalk専用の環境というわけではなく</li>
	  <li>SmalltalkやInterlisp,Mesaなど様々な環境を動作させることができた</li>
	  <li>らしいです。</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	      <h1>C++の黎明期</h1>
	<ul>
	  <li>1979年にBjarne StroustrupC言語の拡張機能として開発が始めれらる(C with Classes)</li>
	  <li>1983年にC++に改称</li>
	  <li>C++は単なるOO言語ではなく、マルチパラダイム言語と呼ぶべきかもしれない</li>
	  <li>詳しくはWebで</li>
	</ul>
	<div class="handout"></div>
      </div>
      
      
      <!-- ======================================================================================== -->
      
      <div class="slide">
	<h1>オブジェクト指向言語の誕生</h1>
	<ul>
	  <li>Simula(1968)
	    <ul>
	      <li>(一般的に語られている)オブジェクト指向言語の基本的な概念をそなえる</li>
	      <li>名前のとおり離散シミュレーションのための言語</li>
	      <li>Simula自身はオブジェクト指向言語を名乗っていなかった</li>
	      <li>ノルウェー産</li>
	    </ul>
	  </li>
	  <li>Smalltalk(1972,1980)
	    <ul>
	      <li>SimulaやLisp、ロゴの影響を受けている</li>
	      <li>明確に「オブジェクト指向」というコンセプトを元に実装された最初の言語</li>
	      <li>細胞(セル)としてのオブジェクトが、メッセージをやり取りすることによって、複雑な処理を実行するというメタファ</li>
	    </ul>
	  </li>
	</ul>
      </div>
      <div class="slide">
	<h1>妙に詳しいはてなキーワードより</h1>
	<p>
	  なお、当初「オブジェクト指向」は、この“オブジェクトへのメッセージ送信”を意味するものであったが、後に C++ の設計者であるビアルネ・ストラウスラップが 1986年に発表した“抽象データ型のスーパーセット”という「カプセル化、継承、多態性」に代表される考え方に置き換えられてゆくことになる。現在は、両者をミックスした概念で語られることが多く、これが「オブジェクト指向」を難解なキーワードにしてしまう原因のひとつとも考えられる。また、“オブジェクト指向プログラミング言語”に２つの元祖があるのはこうした背景による（後者の「オブジェクト指向」の立場での元祖は SIMULA ）。
	</p>
	<h2>この二つの流れがずっーと尾を引いているのだ</h2>
	<div class="handout"></div>
      </div>
    </body>
</html>



