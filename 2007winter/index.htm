<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN"
  "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<html xmlns="http://www.w3.org/1999/xhtml"  xml:lang="ja" lang="ja">
  <head>
    <!--
      テストああああいいいうううえええおおお
      #xyzzyが一発で日本語判定するように日本語を最初に書いてます。。-->
    <title>OO厨厨トレイン</title>
    <!-- metadata -->
    <meta name="generator" content="S5" />
    <meta name="version" content="S5 1.3" />
    <meta name="author" content="Eric A. Meyer" />
    <meta name="company" content="Complex Spiral Consulting" />
    <!-- meta extensions -->
    <meta name="subject" content="S5 1.3beta7" />
    <meta name="creator" content="Christian Effenberger" />
    <meta name="contributor" content="youcan[64]netzgesta[46]de" /><meta name="publisher" content="s5.netzgesta.de" /><meta name="description" content="S5 1.3 is a very flexible and lightweight slide show system available for anyone to use (including transitions and scalable fonts and images)" /><meta name="keywords" content="S5, slide show, projection-mode, powerpoint-like, scala-like, keynote-like, incremental display, scalable fonts, scalable images, transitions, notes, osf, xoxo, css, javascript, xhtml, public domain" /><meta name="robots" content="index, follow" />
    <meta name="revisit-after" content="7 days" />
    <!-- meta temporary -->
    <meta http-equiv="content-type" content="text/html; charset=utf-8" />
    <meta http-equiv="Content-Script-Type" content="text/javascript" />
    <meta http-equiv="Content-Style-Type" content="text/css" />
    <!-- configuration parameters -->
    <meta name="defaultView" content="slideshow" />
    <meta name="controlVis" content="hidden" />
    <!-- configuration extensions -->
    <meta name="tranSitions" content="true" />
    <meta name="fadeDuration" content="500" />
    <meta name="incrDuration" content="250" />
    <!-- style sheet links -->
    <link rel="stylesheet" href="ui/advanced_gfx/slides.css" type="text/css" media="projection" id="slideProj" />
    <link rel="stylesheet" href="ui/advanced_gfx/outline.css" type="text/css" media="screen" id="outlineStyle" />
    <link rel="stylesheet" href="ui/advanced_gfx/print.css" type="text/css" media="print" id="slidePrint" />
    <link rel="stylesheet" href="ui/advanced_gfx/opera.css" type="text/css" media="projection" id="operaFix" />
    <!-- embedded styles -->
    <style type="text/css" media="all">
      .imgcon {width: 100%; margin: 0 auto; padding: 0; text-align: center;}
      #anim {width: 33%; height: 320px; position: relative;}
      #anim img {position: absolute; top: 0px; left: 0px;}
      .logo {margin: 0.2em 0 0 0.15em; padding: 0;}
      .clock {margin: 0.1em 0.2em; padding: 0; position: absolute; top: 0em; right: 0em;}
      .red   {color: #C02;}
      .green {color: green;}
    </style>
    <!-- S5 JS -->
    <script src="ui/advanced_gfx/slides.js" type="text/javascript"></script>
  </head>
  <body>
    <div class="layout">
      <div id="controls"><!-- DO NOT EDIT --></div>
      <div id="currentSlide"><!-- DO NOT EDIT --></div>
      <div id="header">
	<img class="scale logo" width="96" height="75" src="pix/logo.png" alt="S5" title="S5" />
	<object type="application/x-shockwave-flash" data="obj/flash/relog.swf" width="80" height="80" class="scale clock" classid="CLSID:D27CDB6E-AE6D-11cf-96B8-444553540000" codebase="http://active.macromedia.com/flash2/cabs/swflash.cab#version=6,0,0,0">
	  <param name="movie" value="obj/flash/relog.swf" />
	  <param name="wmode" value="transparent" />
	  <param name="quality" value="high" />
	  <param name="menu" value="true" />
	  <param name="bgcolor" value="#6B6B6F" />
	</object>
      </div>

      <div id="footer">
	<h1><span class="red">OO</span>トレイン</h1>
	<h2>オブジェクト指向の現在過去未来</h2>
      </div>
    </div>
    <!-- 
      1. 銀河英雄伝説 1 黎明篇（1996年11月15日発行）ISBN 4-19-890592-4
      2. 銀河英雄伝説 2 野望篇（1997年1月15日発行）ISBN 4-19-890624-6
      3. 銀河英雄伝説 3 雌伏篇（1997年3月15日発行）ISBN 4-19-890652-1
      4. 銀河英雄伝説 4 策謀篇（1997年5月15日発行）ISBN 4-19-890689-0
      5. 銀河英雄伝説 5 風雲篇（1997年7月15日発行）ISBN 4-19-890717-X
      6. &銀河英雄伝説 6 飛翔篇（1997年9月15日発行）ISBN 4-19-890754-4
      7. 銀河英雄伝説 7 怒濤篇（1997年11月15日発行）ISBN 4-19-890787-0
      8. 銀河英雄伝説 8 乱離篇（1998年1月15日発行）ISBN 4-19-890819-2
      9. 銀河英雄伝説 9 回天篇（1998年3月15日発行）ISBN 4-19-890856-7
      10. 銀河英雄伝説 10 落日篇（1998年6月15日発行）ISBN 4-19-890889-3
     -->

    <div class="presentation">
      <div class="slide">
	<h1><span class="red">OO</span><span class="green">厨</span>トレイン(仮題)</h1>
	<h2>～オブジェクト指向の現在過去未来(過去編)～</h2>
	<h3>Yoji.Kanno</h3>
	<h4><a href="http://www.ogis-ri.co.jp" rel="external">株式会社 オージス総研</a></h4>
	<h4><a href="http://d.hatena.ne.jp/yojik/" rel="external">http://d.hatena.ne.jp/yojik/</a></h4>
	<div class="handout"></div>
      </div>
      <div class="slide">
	<h1>参考URL</h1>
	<ul>
	  <li>http://d.hatena.ne.jp/sumim/20040525/p1</li>
	  <li>http://d.hatena.ne.jp/suikan/20040419/1119010908</li>
	  <li>http://hp.vector.co.jp/authors/VA030421/ym030701.htm</li>
	  <li>http://sumim.no-ip.com:8080/collab/19</li>  
	  <li>http://sumim.no-ip.com:8080/collab/24</li>
	  <li>http://ja.wikipedia.org/wiki/C++</li>
	  <li>http://www.thinkit.co.jp/free/compare/12/1/</li>
	</ul>
      </div>
      
      <div class="slide">
	<h1>旅の準備</h1>
	<h2>オブジェクト指向って何</h2>
	<ul>
	  <li>言語パラダイム</li>
	  <li>分析設計技法</li>
	  <li>開発プロセス?</li>
	  <li>考え方?</li>
	</ul>
	<p>
	  言語パラダイムからスタートして用法が拡大してきている。
	  本ドキュメントでは基本的に<b>全肯定</b>の立場で。
	</p>
	<div class="handout"></div>
      </div>      
      
      <div class="slide">
	<h1>もくじ</h1>
	<ul>
	  <li>Part1 黎明編</li>
	  <li>Part2 野望篇</li>
	  <li>Part3 雌伏篇</li>
	  <li>Part4 策謀篇</li>
	  <li>PArt5 風雲篇</li>
	  <li>Part6 飛翔篇</li>
	</ul>
	<p>参考文献: 「銀河英雄伝説」(田中芳樹)</p>
	<div class="handout"></div>
      </div>      

      
      <!-- =============================================== 黎明期 ================================================ -->
      
      <div class="slide">
	<h1>黎明期</h1>
	<p>オブジェクト指向(言語)の誕生と日本への伝達の時代</p>
	<p>オブジェクト指向の黎明期(1980年代)、日本に最初のオブジェクト指向を伝えたのはLispハッカーだった!!</p>
      </div>      
      
      <div class="slide">
	<h1>オブジェクト指向言語の誕生</h1>
	<ul>
	  <li>Simula(1968)
	    <ul>
	      <li>(一般的に語られている)オブジェクト指向言語の基本的な概念をそなえる</li>
	      <li>名前のとおり離散シミュレーションのための言語</li>
	      <li>Simula自身はオブジェクト指向言語を名乗っていなかった</li>
	      <li>ノルウェー産</li>
	    </ul>
	  </li>
	  <li>Smalltalk(1972,1980)
	    <ul>
	      <li>SimulaやLisp、ロゴの影響を受けている</li>
	      <li>明確に「オブジェクト指向」というコンセプトを元に実装された最初の言語</li>
	      <li>細胞(セル)としてのオブジェクトが、メッセージをやり取りすることによって、複雑な処理を実行するというメタファ</li>
	    </ul>
	  </li>
	</ul>
      </div>
      <div class="slide">
	<h1>妙に詳しいはてなキーワードより</h1>
	<p>
	  なお、当初「オブジェクト指向」は、この“オブジェクトへのメッセージ送信”を意味するものであったが、後に C++ の設計者であるビアルネ・ストラウスラップが 1986年に発表した“抽象データ型のスーパーセット”という「カプセル化、継承、多態性」に代表される考え方に置き換えられてゆくことになる。現在は、両者をミックスした概念で語られることが多く、これが「オブジェクト指向」を難解なキーワードにしてしまう原因のひとつとも考えられる。また、“オブジェクト指向プログラミング言語”に２つの元祖があるのはこうした背景による（後者の「オブジェクト指向」の立場での元祖は SIMULA ）。
	</p>
	<h2>この二つの流れがずっーと尾をを引いているのだ</h2>
	<div class="handout"></div>
      </div>      
      
      <div class="slide">
	<h1>日本への輸入</h1>
	<h2>オブジェクト指向が日本に最初に紹介されたのは</h2>
	<ul>
	  <li>1983年</li>
	  <li>Bit誌の竹内郁雄(日本のLispハッカーの草分け)さんによる短期連載</li>
	  <li>日本語で読めるSmalltalkの解説</li>
    	</ul>
	<div class="handout"></div>
      </div>      

      <div class="slide">
	<h1>日本への輸入</h1>
	<h2>日本のパロアルト!? 富士ゼロックス情報システム</h2>
	<p>企業でオブジェクト指向へ取り込んだのは富士ゼロックスでした</p>
	<ul>
	  <li>あとで</li>
	  <li>細かい話を</li>
	  <li>羽生田さんや梅澤さんに聞く</li>
	</ul>    	
	<div class="handout"></div>
      </div>      
      
      <div class="slide">
	<h1>FIXSで研究されていたこと</h1>
	<p>90年代以降のOO関係の有名人が沢山在籍しています </p>	
	<ul>
	</ul>    	
	<div class="handout"></div>
      </div>      

      <div class="slide">
	<h1>Star/JStar</h1>
	<h2>当時最強のオブジェクト指向環境</h2>
	Alto、Star、Smalltalk、Lisa、Mac、Win の関係をはっきりさせよう
	http://sumim.no-ip.com:8080/collab/19
	<ul>
	  <li>最初にSmalltalkを走らせたマシンがAlto</li>
	  <li>Star は Alto の後継ハードウエア（D-マシン）に Star システム（後に ViewPoint）を載せたもの。</li>
	  <li>オブジェクト指向デスクトップ</li>
	  <li>Smalltalk専用の環境というわけではなく</li>
	  <li>SmalltalkやInterlispなど様々な環境を動作させることができた</li>
	  <li>らしいです。</li>
    	</ul>
	<div class="handout"></div>
      </div>      

      <!-- =============================================== 野望編  ================================================ -->
      <div class="slide">
	<h1>Part2 野望編</h1>
	<p>1990年代初頭からオブジェクト指向は言語パラダイムの枠を超える</p>
	<p>開発方法論(分析設計手法)の分野に進出し始めていた</p>
      </div>      
      
      <div class="slide">
	<h1>C++の黎明期</h1>
	<ul>
	  <li>1983年にC with ClassesからC++に名称を変更した</li>
	  <li>日本に紹介されたのは、、、</li>
	  <li>あとでかく</li>
	  <li></li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>ソフトウェアの再利用性とオブジェクト指向</h1>
	<ul>
	  <li>この頃からオブジェクト指向がソフトウェアの再利用性、生産性に寄与する</li>
	  <li>オブジェクト指向言語パラダイムを語る「言葉」が変質してきている
	    <ul>
	      <li>カプセル化、ポリモーフィズム、継承、など</li>
	      <li>再利用性や部品化を強く主張する</li>
	    </ul>
	  </li>
	</ul>
	<div class="handout"></div>
      </div>       

      <div class="slide">
	<h1>部品化とオブジェクト指向</h1>
	<h2>最初期のOOはGUIライブラリとセットで語られていた</h2>
	<ul>
	  <li>MVCやその後継(Smalltalk)</li>
	  <li>MacApp (Pascal)</li>
	  <li>PowerPlant (C++)</li>
	  <li>MFC(C++)</li>
	  <li>VCL(Delphi)</li>
	  <li>Galaxy(C++)</li>
	</ul>
	<p>
	  再利用可能な部品という意味でのクラスライブラリや、部品を動作させる枠組みとしてのフレームワークの実例としては最もわかりやすい
	</p>
	<div class="handout"></div>
      </div>            

      <div class="slide">
	<h1>エンタープライズビジネスへのOOの浸透</h1>
	<h2>商用のSmalltalk環境VisualWorks</h2>
	<ul>
	  <li>金融系業界のSIでSmalltalkは使われていた</li>
	  <li>江川達也の作品「ゴールデンボーイ」にもVisualWorksがちょろっと出てくるよ!</li>
	  <li>ここらへんを、あとでかく</li>
	</ul>
	<div class="handout"></div>
      </div>            
      <div class="slide">
	<h1>オブジェクト指向言語パラダイムの広がり</h1>
	<h2>以下のようにボトムアップから「オブジェクト指向」の意味が広がった</h2>
	<p>
	  <ul>
	    <li>オブジェクト指向言語を利用するためには、、、</li>
	    <li>オブジェクト指向言語を意識した設計が必要で、そのためには</li>
	    <li>システムの問題をオブジェクト指向で分析する必要があり、そのためには</li>
	    <li>新しい開発方法論が必要である</li>
	</p>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>オブジェクト指向言語パラダイムの広がり</h1>
	<h2>開発方法論が重視された理由</h2>
       
	<ul>
	  <li>当時は日本でも世界でもソフトウェア危機が叫ばれていた</li>
	  <li>ソフトウェアの複雑化にも不安があり、プロジェクトの殆どが望んだ結果にならない</li>
	  <li>このような時代の要請があった</li>
	  <li>「人月の神話(1975)」のBrooksはOOが銀の弾丸かもしれないと発言した事がある</li>
	  <li>
	    <ul>
	      <li>http://d.hatena.ne.jp/squeaker/20071024#p1</li>
	  </li>
	</ul>
	<div class="handout"></div>
      </div>



      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>UML関係の書籍をあさると90年代初頭はまさに戦国時代</h2>
	<ul>
	  <li>Shlaer＆Mellor手法</li>
	  <li>Coad＆Yourdon法</li>
	  <li>OOSE</li>
	  <li>OMT</li>
	  <li>Booch</li>
	</ul>
	<p>
	  様々なオブジェクト指向分析/設計技法が乱立した。
	</p>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>共通点</h2>
	<ul>
	  <li>オブジェクト指向言語による実装をめざした</li>
	  <li>ほとんどの手法では、繰り返し型の開発プロセスを前提としていた</li>
	  <li>あとでかく</li>
	</ul>
      </div>

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>相違点</h2>
	<h2>Booch法やOMT法</h2>
	<ul>
	  <li>オブジェクトの構造を重視する流派</li>
	  <li>オブジェクトの振る舞いを重視する流派</li>
	</ul>
      </div>

      <div class="slide">
	<h1>開発方法論の流派</h1>	
	<h2>大島さんの日記に書かれていたコメント</h2>	
	 http://d.hatena.ne.jp/squeaker/20050208#c1107958142
	<p>
	  (前略)
	  振る舞い系の人たちはクラス図による分類よりもオブジェクト間のダイナミックな相互作用を重視します。
	  図もたいていフォーマルには描かず、手書きやカードなどローテクな手法を重視し、詳細はコードにしてしまいます。
	  (中略)
	</p>
      </div>
	
      <div class="slide">
	<h1>開発方法論の流派</h1>	
	<h2>大島さんの日記に書かれていたコメントの続き</h2>	
	<p>
	  OMT, Booch <-> RDD, OBA, OOSE, OORAM などなどこのような手法の違いは、	彼らがネイティブとしていたプログラミング言語によって生まれてきたといって、ほぼ間違いないと思います。
	  ADA, C++ <-> Smalltalk という図式が裏にあります。UMLは前者の人たちが大きな貢献をして出来ていったものと思います。後者は長い間、大多数のモデラーから、「図も描かない野蛮な人たち」とさげすまれてきたのですが、Kent BeckのXP伝導により、今ではある程度の市民権を得ることとなったのです。
	</p>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>開発方法論の乱立</h1>
	<h2>日本では構造派が重視された</h2>
	<ul>
	  <li>Booch法やOMT法</li>
	  <li>オブジェクトの振る舞いを重視する流派、Rebecca Wirfs-BlockとかKent Beckの流派はあまり紹介されなかった</li>
	  <li>なぜか? あとでかく</li>
	</ul>
      </div>


      <!-- =============================================== 雌伏編  ================================================ -->
      <div class="slide">
	<h1>Part3 雌伏篇</h1>
	<p>
	  90年代後半、開発方法論は統一への道を歩み、次代を担うJava,Ruby,Python,Perlが誕生した。
	  またソフトウェア業界の永遠の夢であるソフトウェアの部品化について様々な試みが行われた。
	</p>
      </div>
       
      <div class="slide">
	<h1>オブジェクト指向からコンポーネント指向へ</h1>
	<h2>1990年代の業界の話題はコンポーネントと分散オブジェクト</h2>
	<ul>
	  <li>DCOM＆COM</li>
	  <li>OpenDoc-TaligentOS</li>
	  <li>CORBA関連の各種仕様</li>
      </div>

      <div class="slide">
	<h1>脱線します</h1>
	<h2>今(00年代後半)の技術の伏線はこのころにあります</h2>
	<ul>
	  <li>COMやOpenDocは現在のプラグインで構成されたアプリケーションの始祖</li>
	  <li>CORBA関連の各種仕様はJ2EE(JavaEE)に直接取り込まれる</li>
	</ul>	
      </div>
      
      <div class="slide">
	<h1>Javaの登場</h1>
	<h2>1995年Javaが正式リリースされた</h2>
	<ul>
	  <li>世間の一般的の受け止めかたはWebページを動的にするもの</li>
	  <li>プログラミング言語使いからは、Better C++ , 庶民のためのSmalltalk</li>
	  <li>ちなみにこの頃にRubyもPythonも生まれていた(というわけで雌伏編)</li>
	</ul>
      </div>

      <div class="slide">
	<h1>Javaへの期待</h1>
	<h2>分散コンポーネントの実現手段として期待された</h2>
	<ul>
	  <li>ネットワークを介した実行コード自体のやりとり</li>
	  <li>ポータビリティのある実行コード</li>
	  <li>親しみやすいAlgol系文法でのオブジェクト指向</li>
	</ul>x
      </div>

      <div class="slide">
	<h1>UMLの登場</h1>
	<h2>1996年にver0.9が登場</h2>
	<li>
	  <li>xxxx年 Rational社誕生</li>
	  <li>各方法論の表記法部分を統一</li>
	  <ul>
	  <li>UML CASEツール市場が誕生した</li>
	  <li>
	    <ul>
	      <li>UML CASEは他のツール(構成管理,テスト)を取り込んで開発プロセス全般を担うようになる</li>
	      <li>それに対応するようにRational Unified Processも誕生</li>
	    </ul>
	  </li>
	  <li>日本における最初のUML紹介は、、、、あとでかく</li>
	</ul>
      </div>            

      <div class="slide">
	<h1>パターン運動</h1>
	<h2>コンピュータ・ユーザーは、自分自身のプログラムを書くべきなのである</h2>
	<ul>
	  <li>1987年 :オブジェクト指向プログラムのためのパターン言語の使用
	    <ul>
	      <li>Ward Cunningham and  Kent Beck</li>
	      <li>http://capsctrl.que.jp/kdmsnr/wiki/transl/?UsingPatternLanguagesForOOP</li>
	    </ul>
	  </li>
	  <li>1995年 : デザインパターン 
	    <ul>
	      <li>Erich Gamma,Richard Helm,Ralph E. Johnson,ohn Matthew Vlissides,</li>
	    </ul>
	  </li>
	  <li>PloP</li>
	</ul>
      </div>     
      
      <div class="slide">
	<h1>日本でのパターン運動</h1>
	<h2>技術者が持つ「知識」としてデザインパターン等が認知された</h2>
	<ul>
	  <li>デザインパターン和書の紹介..
	    <ul>
	      <li>邦訳は控えめにいってもウルトラ読みづらい</li>
	    </ul>
	  </li>
	  <li>まさーるさんのページ
	    <ul>
	      <li>JUnitを題材とした紹介</li>
	      <li>コプライエンの組織パターン</li>
	      <li>Niftyのフォーラム上の議論の再掲など</li>
	    </ul>	  
	  </li>
	  <li>JPloPも存在した
	    <ul>
	      <li>日本ではあまり流行らなかった</li>
	      <li>日本版c2.comiが存在しなかったからかも(Wiki重要)</li>
	    </ul>
	  </li>
	</ul>
      </div>
      

      
      <!-- ============================== 策謀篇  ========================================================== -->
      <div class="slide">
	<h1>Part4 策謀篇</h1>
	<p>
	  90年代後半から2000年代前半、エンタープライズ分野ではJavaが主流の言語になった。
	  ベンダーによるアプリケーションサーバからデータベース、場合によっては開発プロセスまでを含めた垂直統合モデルが誕生した。	  
	</p>
      </div>

      <div class="slide">
	<h1>JavaEE(J2EE)の歴史</h1>
	<ul>
	  <li>1999年に発表</li>
	  <li>Javaのエンタープライズ用APIセット</li>
	  <li>当初はやはり一つ前の時代の理想といえる分散コンポーネント技術を指向していた</li>
	  <li>IBMサンフランシスコフレームワークやCORBA関連の各仕様(トランザクションサービスなど)を源流とする</li>
	  <li>コマンド(コントロール)とエンティティの分離はIBMサンフランシスコフレームワークから強く影響を受けている</li>
	  <li>ネーミングサービスやトランザクションサービスなど技術的な仕様はCORBAの影響を強く受けている</li>
	</ul>
	<div class="handout"></div>
      </div>      

      <div class="slide">
	<h1>J2EE(JavaEE)がもたらしたもの</h1>
	<h2>良い面</h2>
	<ul>
	  <li>疎結合の重要性を開発者に伝えた</li>
	  <li>(Tips集にすぎないが)パターンランゲージの概念の普及</li>
	</ul>
	<div class="handout"></div>
      </div>      

      <div class="slide">
	<h1>J2EE(JavaEE)がもたらしたもの</h1>
	<h2>悪い面</h2>
	<ul>
	  <li>開発の分断
	    <ul>
	      <li>不適切なアーキテクチャの階層化により、開発チームの分断が起きる</li>
	    </ul>
	  </li>
	  <li>パターンランゲージの濫用</li>
	  <li>あとでかく</li>
	</ul>
	<div class="handout"></div>
      </div>      
      
      <div class="slide">
	<h1>MDA</h1>	
	<h2>OMGが2001年に正式発表</h2>
	<ul>
	  <li>モデル変換による設計モデルから実装モデルへの変換</li>
	  <li>実装依存部分の分離を目的</li>
	</ul>
	<p>
	  結果は? あとでかく
	</p>
      </div>
      
      <div class="slide">
	<h1>組み込みとオブジェクト指向</h1>
	<ul>
	  <li>executable uml</li>
	  <li>MDAとは微妙に毛色が違うかもしれない</li>
	  <li>あとでかく</li>
      </div>
      
      
      <div class="slide">
	<h1>開発プロセスの誕生</h1>
	<h2>開発方法論は開発プロセスに進化していた</h2>
	<p>分析、設計だけではなく構成管理やテスト、マネジメントを含めた開発全体に対するプラクティスをまとめたもの</p>
	</p>
	<ul>
	  <li>Rational Unified Process(1998)</li>
	  <li>Extreme Programming(1999)
	</ul>
	<p>
	  ここでもある種の二極化が始まっている(気がする)
	</p>
	
      </div>
      
      <!-- 風雲篇 -->
      <div class="slide">
	<h1>PArt5 風雲篇</h1>
      </div>

      <div class="slide">
	<h1>オルタナティブな流れ</h1>
	<h2></h2>
	<ul>
	  <li>J2EE(JavaEE)否定としてのDIコンテナ</li>
	  <li>extream programing</li>
	  <li>アジャイルブーム</li>
	  <li>PofEAA</li>
	  <li>RubyとRails</li>
	</ul>
	<div class="handout"></div>
      </div>

      <div class="slide">
	<h1>J2EE(JavaEE)否定としてのDIコンテナ</h1>
	<h2>IoCコンテナもしくはDIコンテナの登場</h2>
	<ul>
	  <li>あとでかく</li>
	</ul>
	<div class="handout"></div>
      </div>          
    </div>


    <div class="slide">
	<h1>extreame programing</h1>
	<h2></h2>
	<ul>
	  <li>XPの誕生は1999年</li>
	  <li>XPが日本に紹介されたのも同年(タイムラグというものは存在しない)</li>
	  <li>オブジェクトの広場の平鍋さんのインタビュー
	    <ul>
	      <li>http://www.ogis-ri.co.jp/otc/hiroba/others/OORing/interview06.html</li>
	    </ul>
	  </li>
      </div>     
      
      <div class="slide">
	<h1>アジャイルブーム</h1>
	<h2></h2>
	<ul>
	  <li>あとでかく</li>
	</ul>
      </div>     
	
      <div class="slide">
	<h1>PofEAA</h1>
	<h2>PofEAAは結構重要論</h2>
	<ul>
	  <li>2000年以降のエンタープライズアプリの設計パターンの集大成</li>
	  <li>結果としてエンタープライズアプリ設計の「地図」になっている</li>
	  <li>Railsに直接影響を与えている</li>
	  <li>DDDに直接影響を与えている</li>
	</ul>
	<div class="handout"></div>
      </div>          
    </div>

    <div class="slide">
      <h1>Part6 飛翔篇</h1>
      <p>
	DDD関連とかいろいろはこのセクション?
	
      </p>
    </div>

  
  </body>
</html>
